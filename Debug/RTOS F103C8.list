
RTOS F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed8  08004ed8  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee0  08004ee0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee0  08004ee0  00005ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004ee8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  20000060  08004f48  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  08004f48  000064c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b3  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f88  00000000  00000000  0001a43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0001d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff0  00000000  00000000  0001e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a403  00000000  00000000  0001f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c23  00000000  00000000  00039c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3ad  00000000  00000000  0005182e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebbdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a90  00000000  00000000  000ebc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f16b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d48 	.word	0x08004d48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004d48 	.word	0x08004d48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	200000d0 	.word	0x200000d0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b0a4      	sub	sp, #144	@ 0x90
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fca5 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f87d 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f96b 	bl	8000478 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001a2:	f000 f8d3 	bl	800034c <MX_ADC1_Init>
  MX_I2C1_Init();
 80001a6:	f000 f90f 	bl	80003c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001aa:	f000 f93b 	bl	8000424 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001ae:	4b30      	ldr	r3, [pc, #192]	@ (8000270 <main+0xe0>)
 80001b0:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80001b4:	461d      	mov	r5, r3
 80001b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001c2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80001c6:	2100      	movs	r1, #0
 80001c8:	4618      	mov	r0, r3
 80001ca:	f002 ff31 	bl	8003030 <osThreadCreate>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a28      	ldr	r2, [pc, #160]	@ (8000274 <main+0xe4>)
 80001d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of pickButtonTask */
  osThreadDef(pickButtonTask, pickButton, osPriorityLow, 0, 128);
 80001d4:	4b28      	ldr	r3, [pc, #160]	@ (8000278 <main+0xe8>)
 80001d6:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80001da:	461d      	mov	r5, r3
 80001dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pickButtonTaskHandle = osThreadCreate(osThread(pickButtonTask), NULL);
 80001e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 ff1e 	bl	8003030 <osThreadCreate>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4a21      	ldr	r2, [pc, #132]	@ (800027c <main+0xec>)
 80001f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of getADCTask */
  osThreadDef(getADCTask, getADC, osPriorityAboveNormal, 0, 128);
 80001fa:	4b21      	ldr	r3, [pc, #132]	@ (8000280 <main+0xf0>)
 80001fc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000200:	461d      	mov	r5, r3
 8000202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getADCTaskHandle = osThreadCreate(osThread(getADCTask), NULL);
 800020e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f002 ff0b 	bl	8003030 <osThreadCreate>
 800021a:	4603      	mov	r3, r0
 800021c:	4a19      	ldr	r2, [pc, #100]	@ (8000284 <main+0xf4>)
 800021e:	6013      	str	r3, [r2, #0]

  /* definition and creation of dispUARTTask */
  osThreadDef(dispUARTTask, dispUART, osPriorityNormal, 0, 128);
 8000220:	4b19      	ldr	r3, [pc, #100]	@ (8000288 <main+0xf8>)
 8000222:	f107 0420 	add.w	r4, r7, #32
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dispUARTTaskHandle = osThreadCreate(osThread(dispUARTTask), NULL);
 8000234:	f107 0320 	add.w	r3, r7, #32
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fef8 	bl	8003030 <osThreadCreate>
 8000240:	4603      	mov	r3, r0
 8000242:	4a12      	ldr	r2, [pc, #72]	@ (800028c <main+0xfc>)
 8000244:	6013      	str	r3, [r2, #0]

  /* definition and creation of ctrlLEDTask */
  osThreadDef(ctrlLEDTask, ctrlLED, osPriorityNormal, 0, 128);
 8000246:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <main+0x100>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ctrlLEDTaskHandle = osThreadCreate(osThread(ctrlLEDTask), NULL);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fee7 	bl	8003030 <osThreadCreate>
 8000262:	4603      	mov	r3, r0
 8000264:	4a0b      	ldr	r2, [pc, #44]	@ (8000294 <main+0x104>)
 8000266:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000268:	f002 fedb 	bl	8003022 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <main+0xdc>
 8000270:	08004d6c 	.word	0x08004d6c
 8000274:	200003b8 	.word	0x200003b8
 8000278:	08004d98 	.word	0x08004d98
 800027c:	200003bc 	.word	0x200003bc
 8000280:	08004dc0 	.word	0x08004dc0
 8000284:	200003c0 	.word	0x200003c0
 8000288:	08004dec 	.word	0x08004dec
 800028c:	200003c4 	.word	0x200003c4
 8000290:	08004e14 	.word	0x08004e14
 8000294:	200003c8 	.word	0x200003c8

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b094      	sub	sp, #80	@ 0x50
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a2:	2228      	movs	r2, #40	@ 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f004 f8be 	bl	8004428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	f107 0314 	add.w	r3, r7, #20
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002da:	2302      	movs	r3, #2
 80002dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80002e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fc72 	bl	8001bd8 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002fa:	f000 f9eb 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800030e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fede 	bl	80020dc <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000326:	f000 f9d5 	bl	80006d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800032a:	2302      	movs	r3, #2
 800032c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f002 f88f 	bl	8002458 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000340:	f000 f9c8 	bl	80006d4 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3750      	adds	r7, #80	@ 0x50
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800035e:	4a19      	ldr	r2, [pc, #100]	@ (80003c4 <MX_ADC1_Init+0x78>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000376:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800037a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_ADC1_Init+0x74>)
 8000384:	2201      	movs	r2, #1
 8000386:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000388:	480d      	ldr	r0, [pc, #52]	@ (80003c0 <MX_ADC1_Init+0x74>)
 800038a:	f000 fbdd 	bl	8000b48 <HAL_ADC_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000394:	f000 f99e 	bl	80006d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_ADC1_Init+0x74>)
 80003aa:	f000 fe91 	bl	80010d0 <HAL_ADC_ConfigChannel>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003b4:	f000 f98e 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200002ec 	.word	0x200002ec
 80003c4:	40012400 	.word	0x40012400

080003c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003ce:	4a13      	ldr	r2, [pc, #76]	@ (800041c <MX_I2C1_Init+0x54>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003d4:	4a12      	ldr	r2, [pc, #72]	@ (8000420 <MX_I2C1_Init+0x58>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_I2C1_Init+0x50>)
 8000406:	f001 faa3 	bl	8001950 <HAL_I2C_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f960 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000031c 	.word	0x2000031c
 800041c:	40005400 	.word	0x40005400
 8000420:	00061a80 	.word	0x00061a80

08000424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	@ (8000474 <MX_USART1_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042e:	4b10      	ldr	r3, [pc, #64]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 8000430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_USART1_UART_Init+0x4c>)
 800045c:	f002 fba6 	bl	8002bac <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 f935 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000370 	.word	0x20000370
 8000474:	40013800 	.word	0x40013800

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048c:	4b31      	ldr	r3, [pc, #196]	@ (8000554 <MX_GPIO_Init+0xdc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a30      	ldr	r2, [pc, #192]	@ (8000554 <MX_GPIO_Init+0xdc>)
 8000492:	f043 0310 	orr.w	r3, r3, #16
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <MX_GPIO_Init+0xdc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0310 	and.w	r3, r3, #16
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b28      	ldr	r3, [pc, #160]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0320 	and.w	r3, r3, #32
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a24      	ldr	r2, [pc, #144]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004da:	f043 0308 	orr.w	r3, r3, #8
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <MX_GPIO_Init+0xdc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f2:	4819      	ldr	r0, [pc, #100]	@ (8000558 <MX_GPIO_Init+0xe0>)
 80004f4:	f001 f9fb 	bl	80018ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4811      	ldr	r0, [pc, #68]	@ (8000558 <MX_GPIO_Init+0xe0>)
 8000512:	f001 f851 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button2_Pin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8000516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000520:	2302      	movs	r3, #2
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	480c      	ldr	r0, [pc, #48]	@ (800055c <MX_GPIO_Init+0xe4>)
 800052c:	f001 f844 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <MX_GPIO_Init+0xe4>)
 8000546:	f001 f837 	bl	80015b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40011000 	.word	0x40011000
 800055c:	40010c00 	.word	0x40010c00

08000560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f002 fdad 	bl	80030c8 <osDelay>
 800056e:	e7fb      	b.n	8000568 <StartDefaultTask+0x8>

08000570 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void const * argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
	  for(;;)
	  {
		  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_SET)
 8000578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <pickButton+0x3c>)
 800057e:	f001 f99f 	bl	80018c0 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d106      	bne.n	8000596 <pickButton+0x26>
		  	  {
		  		  osDelay(200);	// debounce
 8000588:	20c8      	movs	r0, #200	@ 0xc8
 800058a:	f002 fd9d 	bl	80030c8 <osDelay>
		  		  button1_pressed = 1;
 800058e:	4b08      	ldr	r3, [pc, #32]	@ (80005b0 <pickButton+0x40>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	e005      	b.n	80005a2 <pickButton+0x32>
		  	  }else{
		  		osDelay(200);	// debounce
 8000596:	20c8      	movs	r0, #200	@ 0xc8
 8000598:	f002 fd96 	bl	80030c8 <osDelay>
		  		  button1_pressed = 0;
 800059c:	4b04      	ldr	r3, [pc, #16]	@ (80005b0 <pickButton+0x40>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
		  	  }
	    osDelay(100);  // Short delay for RTOS
 80005a2:	2064      	movs	r0, #100	@ 0x64
 80005a4:	f002 fd90 	bl	80030c8 <osDelay>
		  if(HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) == GPIO_PIN_SET)
 80005a8:	e7e6      	b.n	8000578 <pickButton+0x8>
 80005aa:	bf00      	nop
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	200002d0 	.word	0x200002d0

080005b4 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void const * argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80005bc:	480a      	ldr	r0, [pc, #40]	@ (80005e8 <getADC+0x34>)
 80005be:	f000 fb9b 	bl	8000cf8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80005c2:	210a      	movs	r1, #10
 80005c4:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <getADC+0x34>)
 80005c6:	f000 fc71 	bl	8000eac <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 80005ca:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <getADC+0x34>)
 80005cc:	f000 fd74 	bl	80010b8 <HAL_ADC_GetValue>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <getADC+0x38>)
 80005d6:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <getADC+0x34>)
 80005da:	f000 fc3b 	bl	8000e54 <HAL_ADC_Stop>

	  // process ADC values here


	  osDelay(100);
 80005de:	2064      	movs	r0, #100	@ 0x64
 80005e0:	f002 fd72 	bl	80030c8 <osDelay>
	  HAL_ADC_Start(&hadc1);
 80005e4:	bf00      	nop
 80005e6:	e7e9      	b.n	80005bc <getADC+0x8>
 80005e8:	200002ec 	.word	0x200002ec
 80005ec:	200002e8 	.word	0x200002e8

080005f0 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void const * argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispUART */
  /* Infinite loop */

	for(;;)
	  {
	    sprintf(tx_buffer, "%hu\r\n", x_val);  // Mengirim nilai ADC
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <dispUART+0x54>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4912      	ldr	r1, [pc, #72]	@ (8000648 <dispUART+0x58>)
 8000600:	4812      	ldr	r0, [pc, #72]	@ (800064c <dispUART+0x5c>)
 8000602:	f003 fef1 	bl	80043e8 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 10);
 8000606:	4811      	ldr	r0, [pc, #68]	@ (800064c <dispUART+0x5c>)
 8000608:	f7ff fda2 	bl	8000150 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	230a      	movs	r3, #10
 8000612:	490e      	ldr	r1, [pc, #56]	@ (800064c <dispUART+0x5c>)
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <dispUART+0x60>)
 8000616:	f002 fb19 	bl	8002c4c <HAL_UART_Transmit>

	    if(button1_pressed)
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <dispUART+0x64>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <dispUART+0x40>
	    {
	      HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n") - 1, 10);
 8000622:	230a      	movs	r3, #10
 8000624:	2211      	movs	r2, #17
 8000626:	490c      	ldr	r1, [pc, #48]	@ (8000658 <dispUART+0x68>)
 8000628:	4809      	ldr	r0, [pc, #36]	@ (8000650 <dispUART+0x60>)
 800062a:	f002 fb0f 	bl	8002c4c <HAL_UART_Transmit>
 800062e:	e005      	b.n	800063c <dispUART+0x4c>
	    }
	    else
	    {
	      HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 NULL\r\n", sizeof("Button1 NULL\r\n") - 1, 10);
 8000630:	230a      	movs	r3, #10
 8000632:	220e      	movs	r2, #14
 8000634:	4909      	ldr	r1, [pc, #36]	@ (800065c <dispUART+0x6c>)
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <dispUART+0x60>)
 8000638:	f002 fb08 	bl	8002c4c <HAL_UART_Transmit>
	    }

	    osDelay(100);  // Delay antar transmisi
 800063c:	2064      	movs	r0, #100	@ 0x64
 800063e:	f002 fd43 	bl	80030c8 <osDelay>
	    sprintf(tx_buffer, "%hu\r\n", x_val);  // Mengirim nilai ADC
 8000642:	e7d9      	b.n	80005f8 <dispUART+0x8>
 8000644:	200002e8 	.word	0x200002e8
 8000648:	08004e30 	.word	0x08004e30
 800064c:	200002d4 	.word	0x200002d4
 8000650:	20000370 	.word	0x20000370
 8000654:	200002d0 	.word	0x200002d0
 8000658:	08004e38 	.word	0x08004e38
 800065c:	08004e4c 	.word	0x08004e4c

08000660 <ctrlLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ctrlLED */
void ctrlLED(void const * argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ctrlLED */
  /* Infinite loop */
	for(;;)
	  {
	    if(button1_pressed || x_val > 2000)
 8000668:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <ctrlLED+0x44>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d104      	bne.n	800067a <ctrlLED+0x1a>
 8000670:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <ctrlLED+0x48>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000678:	d909      	bls.n	800068e <ctrlLED+0x2e>
	    {
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);  // Toggle LED
 800067a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067e:	480b      	ldr	r0, [pc, #44]	@ (80006ac <ctrlLED+0x4c>)
 8000680:	f001 f94d 	bl	800191e <HAL_GPIO_TogglePin>
	      osDelay(300);  // Delay to make the toggle visible
 8000684:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000688:	f002 fd1e 	bl	80030c8 <osDelay>
 800068c:	e005      	b.n	800069a <ctrlLED+0x3a>
	    }
	    else
	    {
	      HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);  // Turn off LED
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000694:	4805      	ldr	r0, [pc, #20]	@ (80006ac <ctrlLED+0x4c>)
 8000696:	f001 f92a 	bl	80018ee <HAL_GPIO_WritePin>
	    }
	    osDelay(50);  // Reduced delay for responsiveness
 800069a:	2032      	movs	r0, #50	@ 0x32
 800069c:	f002 fd14 	bl	80030c8 <osDelay>
	    if(button1_pressed || x_val > 2000)
 80006a0:	e7e2      	b.n	8000668 <ctrlLED+0x8>
 80006a2:	bf00      	nop
 80006a4:	200002d0 	.word	0x200002d0
 80006a8:	200002e8 	.word	0x200002e8
 80006ac:	40011000 	.word	0x40011000

080006b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c2:	f000 fa25 	bl	8000b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40000800 	.word	0x40000800

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <Error_Handler+0x8>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_MspInit+0x68>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <HAL_MspInit+0x68>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <HAL_MspInit+0x68>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <HAL_MspInit+0x68>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <HAL_MspInit+0x68>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <HAL_MspInit+0x68>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	210f      	movs	r1, #15
 800071a:	f06f 0001 	mvn.w	r0, #1
 800071e:	f000 ff20 	bl	8001562 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <HAL_MspInit+0x6c>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <HAL_MspInit+0x6c>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	40010000 	.word	0x40010000

08000750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a14      	ldr	r2, [pc, #80]	@ (80007bc <HAL_ADC_MspInit+0x6c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d121      	bne.n	80007b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <HAL_ADC_MspInit+0x70>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <HAL_ADC_MspInit+0x70>)
 8000776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <HAL_ADC_MspInit+0x70>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <HAL_ADC_MspInit+0x70>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <HAL_ADC_MspInit+0x70>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <HAL_ADC_MspInit+0x70>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a4:	2303      	movs	r3, #3
 80007a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <HAL_ADC_MspInit+0x74>)
 80007b0:	f000 ff02 	bl	80015b8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40012400 	.word	0x40012400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <HAL_I2C_MspInit+0x70>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d123      	bne.n	8000830 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_I2C_MspInit+0x74>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a13      	ldr	r2, [pc, #76]	@ (800083c <HAL_I2C_MspInit+0x74>)
 80007ee:	f043 0308 	orr.w	r3, r3, #8
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_I2C_MspInit+0x74>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000800:	23c0      	movs	r3, #192	@ 0xc0
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000804:	2312      	movs	r3, #18
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	480b      	ldr	r0, [pc, #44]	@ (8000840 <HAL_I2C_MspInit+0x78>)
 8000814:	f000 fed0 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <HAL_I2C_MspInit+0x74>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <HAL_I2C_MspInit+0x74>)
 800081e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000822:	61d3      	str	r3, [r2, #28]
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_I2C_MspInit+0x74>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40005400 	.word	0x40005400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010c00 	.word	0x40010c00

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1c      	ldr	r2, [pc, #112]	@ (80008d0 <HAL_UART_MspInit+0x8c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d131      	bne.n	80008c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a1a      	ldr	r2, [pc, #104]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	@ (80008d8 <HAL_UART_MspInit+0x94>)
 80008aa:	f000 fe85 	bl	80015b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <HAL_UART_MspInit+0x94>)
 80008c4:	f000 fe78 	bl	80015b8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	@ 0x38
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008f2:	4b34      	ldr	r3, [pc, #208]	@ (80009c4 <HAL_InitTick+0xe8>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a33      	ldr	r2, [pc, #204]	@ (80009c4 <HAL_InitTick+0xe8>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b31      	ldr	r3, [pc, #196]	@ (80009c4 <HAL_InitTick+0xe8>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090a:	f107 0210 	add.w	r2, r7, #16
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fd51 	bl	80023bc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800091e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000920:	2b00      	cmp	r3, #0
 8000922:	d103      	bne.n	800092c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000924:	f001 fd22 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 8000928:	6378      	str	r0, [r7, #52]	@ 0x34
 800092a:	e004      	b.n	8000936 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800092c:	f001 fd1e 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 8000930:	4603      	mov	r3, r0
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000938:	4a23      	ldr	r2, [pc, #140]	@ (80009c8 <HAL_InitTick+0xec>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	0c9b      	lsrs	r3, r3, #18
 8000940:	3b01      	subs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000944:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <HAL_InitTick+0xf0>)
 8000946:	4a22      	ldr	r2, [pc, #136]	@ (80009d0 <HAL_InitTick+0xf4>)
 8000948:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <HAL_InitTick+0xf0>)
 800094c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000950:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000952:	4a1e      	ldr	r2, [pc, #120]	@ (80009cc <HAL_InitTick+0xf0>)
 8000954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000956:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_InitTick+0xf0>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <HAL_InitTick+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <HAL_InitTick+0xf0>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800096a:	4818      	ldr	r0, [pc, #96]	@ (80009cc <HAL_InitTick+0xf0>)
 800096c:	f001 fee0 	bl	8002730 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000976:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800097a:	2b00      	cmp	r3, #0
 800097c:	d11b      	bne.n	80009b6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800097e:	4813      	ldr	r0, [pc, #76]	@ (80009cc <HAL_InitTick+0xf0>)
 8000980:	f001 ff2e 	bl	80027e0 <HAL_TIM_Base_Start_IT>
 8000984:	4603      	mov	r3, r0
 8000986:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800098a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800098e:	2b00      	cmp	r3, #0
 8000990:	d111      	bne.n	80009b6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000992:	201e      	movs	r0, #30
 8000994:	f000 fe01 	bl	800159a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b0f      	cmp	r3, #15
 800099c:	d808      	bhi.n	80009b0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800099e:	2200      	movs	r2, #0
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	201e      	movs	r0, #30
 80009a4:	f000 fddd 	bl	8001562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a8:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_InitTick+0xf8>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	e002      	b.n	80009b6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3738      	adds	r7, #56	@ 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	200003cc 	.word	0x200003cc
 80009d0:	40000800 	.word	0x40000800
 80009d4:	20000004 	.word	0x20000004

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <TIM4_IRQHandler+0x10>)
 8000a12:	f001 ff37 	bl	8002884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200003cc 	.word	0x200003cc

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f003 fcf2 	bl	8004438 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20005000 	.word	0x20005000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20000414 	.word	0x20000414
 8000a88:	200014c8 	.word	0x200014c8

08000a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff fff8 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480b      	ldr	r0, [pc, #44]	@ (8000acc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a9e:	490c      	ldr	r1, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a09      	ldr	r2, [pc, #36]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab4:	4c09      	ldr	r4, [pc, #36]	@ (8000adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f003 fcbf 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff fb63 	bl	8000190 <main>
  bx lr
 8000aca:	4770      	bx	lr
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ad4:	08004ee8 	.word	0x08004ee8
  ldr r2, =_sbss
 8000ad8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000adc:	200014c8 	.word	0x200014c8

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 fd29 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f7ff feee 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fdee 	bl	80006e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a03      	ldr	r2, [pc, #12]	@ (8000b30 <HAL_IncTick+0x20>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000418 	.word	0x20000418

08000b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	@ (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000418 	.word	0x20000418

08000b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0be      	b.n	8000ce8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff fde2 	bl	8000750 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 fbf1 	bl	8001374 <ADC_ConversionStop_Disable>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8099 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8095 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bb4:	f023 0302 	bic.w	r3, r3, #2
 8000bb8:	f043 0202 	orr.w	r2, r3, #2
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7b1b      	ldrb	r3, [r3, #12]
 8000bce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_Init+0xa2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <HAL_ADC_Init+0xa8>
 8000bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bee:	e000      	b.n	8000bf2 <HAL_ADC_Init+0xaa>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7d1b      	ldrb	r3, [r3, #20]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d119      	bne.n	8000c34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	035a      	lsls	r2, r3, #13
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e00b      	b.n	8000c34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c20:	f043 0220 	orr.w	r2, r3, #32
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <HAL_ADC_Init+0x1a8>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c64:	d003      	beq.n	8000c6e <HAL_ADC_Init+0x126>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	051b      	lsls	r3, r3, #20
 8000c76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <HAL_ADC_Init+0x1ac>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d10b      	bne.n	8000cb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb2:	e018      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f023 0312 	bic.w	r3, r3, #18
 8000cbc:	f043 0210 	orr.w	r2, r3, #16
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc8:	f043 0201 	orr.w	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd4:	e007      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cda:	f043 0210 	orr.w	r2, r3, #16
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cf4:	ff1f0efe 	.word	0xff1f0efe

08000cf8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Start+0x1a>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e098      	b.n	8000e44 <HAL_ADC_Start+0x14c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 fad0 	bl	80012c0 <ADC_Enable>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8087 	bne.w	8000e3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a41      	ldr	r2, [pc, #260]	@ (8000e4c <HAL_ADC_Start+0x154>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d105      	bne.n	8000d56 <HAL_ADC_Start+0x5e>
 8000d4a:	4b41      	ldr	r3, [pc, #260]	@ (8000e50 <HAL_ADC_Start+0x158>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d5a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d026      	beq.n	8000dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d80:	e01d      	b.n	8000dbe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2f      	ldr	r2, [pc, #188]	@ (8000e50 <HAL_ADC_Start+0x158>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d004      	beq.n	8000da2 <HAL_ADC_Start+0xaa>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e4c <HAL_ADC_Start+0x154>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_ADC_Start+0xc6>
 8000da2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <HAL_ADC_Start+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000db6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dce:	f023 0206 	bic.w	r2, r3, #6
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dd6:	e002      	b.n	8000dde <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f06f 0202 	mvn.w	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000dfa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000dfe:	d113      	bne.n	8000e28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e04:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <HAL_ADC_Start+0x154>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d105      	bne.n	8000e16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_ADC_Start+0x158>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	e00c      	b.n	8000e42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	e003      	b.n	8000e42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012800 	.word	0x40012800
 8000e50:	40012400 	.word	0x40012400

08000e54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Stop+0x1a>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e01a      	b.n	8000ea4 <HAL_ADC_Stop+0x50>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fa7c 	bl	8001374 <ADC_ConversionStop_Disable>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d109      	bne.n	8000e9a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ec2:	f7ff fe37 	bl	8000b34 <HAL_GetTick>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eda:	f043 0220 	orr.w	r2, r3, #32
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0d3      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d131      	bne.n	8000f60 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f02:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12a      	bne.n	8000f60 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0a:	e021      	b.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d01d      	beq.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_ADC_PollForConversion+0x7e>
 8000f1a:	f7ff fe0b 	bl	8000b34 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d212      	bcs.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10b      	bne.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	f043 0204 	orr.w	r2, r3, #4
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0a2      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0d6      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f5e:	e070      	b.n	8001042 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f60:	4b4f      	ldr	r3, [pc, #316]	@ (80010a0 <HAL_ADC_PollForConversion+0x1f4>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	2002      	movs	r0, #2
 8000f66:	f001 fb2d 	bl	80025c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	4b4b      	ldr	r3, [pc, #300]	@ (80010a4 <HAL_ADC_PollForConversion+0x1f8>)
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x104>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68d9      	ldr	r1, [r3, #12]
 8000f84:	4b48      	ldr	r3, [pc, #288]	@ (80010a8 <HAL_ADC_PollForConversion+0x1fc>)
 8000f86:	400b      	ands	r3, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x104>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6919      	ldr	r1, [r3, #16]
 8000f92:	4b46      	ldr	r3, [pc, #280]	@ (80010ac <HAL_ADC_PollForConversion+0x200>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <HAL_ADC_PollForConversion+0x100>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68d9      	ldr	r1, [r3, #12]
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <HAL_ADC_PollForConversion+0x204>)
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_PollForConversion+0x100>
 8000fa8:	2314      	movs	r3, #20
 8000faa:	e020      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fac:	2329      	movs	r3, #41	@ 0x29
 8000fae:	e01e      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80010ac <HAL_ADC_PollForConversion+0x200>)
 8000fb8:	400b      	ands	r3, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d106      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x120>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80010b0 <HAL_ADC_PollForConversion+0x204>)
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00d      	beq.n	8000fe8 <HAL_ADC_PollForConversion+0x13c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	4b38      	ldr	r3, [pc, #224]	@ (80010b4 <HAL_ADC_PollForConversion+0x208>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <HAL_ADC_PollForConversion+0x140>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <HAL_ADC_PollForConversion+0x208>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_PollForConversion+0x140>
 8000fe8:	2354      	movs	r3, #84	@ 0x54
 8000fea:	e000      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fec:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ff4:	e021      	b.n	800103a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d01a      	beq.n	8001034 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <HAL_ADC_PollForConversion+0x168>
 8001004:	f7ff fd96 	bl	8000b34 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d20f      	bcs.n	8001034 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d90b      	bls.n	8001034 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001020:	f043 0204 	orr.w	r2, r3, #4
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e030      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	429a      	cmp	r2, r3
 8001040:	d8d9      	bhi.n	8000ff6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f06f 0212 	mvn.w	r2, #18
 800104a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001050:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001062:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001066:	d115      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800106c:	2b00      	cmp	r3, #0
 800106e:	d111      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	24924924 	.word	0x24924924
 80010a8:	00924924 	.word	0x00924924
 80010ac:	12492492 	.word	0x12492492
 80010b0:	00492492 	.word	0x00492492
 80010b4:	00249249 	.word	0x00249249

080010b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x20>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e0dc      	b.n	80012aa <HAL_ADC_ConfigChannel+0x1da>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d81c      	bhi.n	800113a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b05      	subs	r3, #5
 8001112:	221f      	movs	r2, #31
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b05      	subs	r3, #5
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	635a      	str	r2, [r3, #52]	@ 0x34
 8001138:	e03c      	b.n	80011b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d81c      	bhi.n	800117c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b23      	subs	r3, #35	@ 0x23
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4019      	ands	r1, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b23      	subs	r3, #35	@ 0x23
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	631a      	str	r2, [r3, #48]	@ 0x30
 800117a:	e01b      	b.n	80011b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	3b41      	subs	r3, #65	@ 0x41
 800118e:	221f      	movs	r2, #31
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b41      	subs	r3, #65	@ 0x41
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d91c      	bls.n	80011f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	3b1e      	subs	r3, #30
 80011ce:	2207      	movs	r2, #7
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	e019      	b.n	800122a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6919      	ldr	r1, [r3, #16]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6898      	ldr	r0, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	fa00 f203 	lsl.w	r2, r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d003      	beq.n	800123a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001236:	2b11      	cmp	r3, #17
 8001238:	d132      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d125      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d126      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001260:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b10      	cmp	r3, #16
 8001268:	d11a      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0c9a      	lsrs	r2, r3, #18
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001280:	e002      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3b01      	subs	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f9      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x1b2>
 800128e:	e007      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40012400 	.word	0x40012400
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d040      	beq.n	8001360 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0201 	orr.w	r2, r2, #1
 80012ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <ADC_Enable+0xac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <ADC_Enable+0xb0>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012fc:	e002      	b.n	8001304 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3b01      	subs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800130a:	f7ff fc13 	bl	8000b34 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001310:	e01f      	b.n	8001352 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001312:	f7ff fc0f 	bl	8000b34 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d918      	bls.n	8001352 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d011      	beq.n	8001352 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e007      	b.n	8001362 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d1d8      	bne.n	8001312 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d12e      	bne.n	80013ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139e:	f7ff fbc9 	bl	8000b34 <HAL_GetTick>
 80013a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013a4:	e01b      	b.n	80013de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013a6:	f7ff fbc5 	bl	8000b34 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d914      	bls.n	80013de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10d      	bne.n	80013de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d0dc      	beq.n	80013a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4906      	ldr	r1, [pc, #24]	@ (8001490 <__NVIC_EnableIRQ+0x34>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff4f 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff64 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ffb2 	bl	80014e8 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff81 	bl	8001494 <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff57 	bl	800145c <__NVIC_EnableIRQ>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b08b      	sub	sp, #44	@ 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ca:	e169      	b.n	80018a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015cc:	2201      	movs	r2, #1
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8158 	bne.w	800189a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a9a      	ldr	r2, [pc, #616]	@ (8001858 <HAL_GPIO_Init+0x2a0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d05e      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 80015f4:	4a98      	ldr	r2, [pc, #608]	@ (8001858 <HAL_GPIO_Init+0x2a0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d875      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 80015fa:	4a98      	ldr	r2, [pc, #608]	@ (800185c <HAL_GPIO_Init+0x2a4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d058      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001600:	4a96      	ldr	r2, [pc, #600]	@ (800185c <HAL_GPIO_Init+0x2a4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d86f      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001606:	4a96      	ldr	r2, [pc, #600]	@ (8001860 <HAL_GPIO_Init+0x2a8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d052      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 800160c:	4a94      	ldr	r2, [pc, #592]	@ (8001860 <HAL_GPIO_Init+0x2a8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d869      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001612:	4a94      	ldr	r2, [pc, #592]	@ (8001864 <HAL_GPIO_Init+0x2ac>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d04c      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001618:	4a92      	ldr	r2, [pc, #584]	@ (8001864 <HAL_GPIO_Init+0x2ac>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d863      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 800161e:	4a92      	ldr	r2, [pc, #584]	@ (8001868 <HAL_GPIO_Init+0x2b0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d046      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
 8001624:	4a90      	ldr	r2, [pc, #576]	@ (8001868 <HAL_GPIO_Init+0x2b0>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d85d      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 800162a:	2b12      	cmp	r3, #18
 800162c:	d82a      	bhi.n	8001684 <HAL_GPIO_Init+0xcc>
 800162e:	2b12      	cmp	r3, #18
 8001630:	d859      	bhi.n	80016e6 <HAL_GPIO_Init+0x12e>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <HAL_GPIO_Init+0x80>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	080016b3 	.word	0x080016b3
 800163c:	0800168d 	.word	0x0800168d
 8001640:	0800169f 	.word	0x0800169f
 8001644:	080016e1 	.word	0x080016e1
 8001648:	080016e7 	.word	0x080016e7
 800164c:	080016e7 	.word	0x080016e7
 8001650:	080016e7 	.word	0x080016e7
 8001654:	080016e7 	.word	0x080016e7
 8001658:	080016e7 	.word	0x080016e7
 800165c:	080016e7 	.word	0x080016e7
 8001660:	080016e7 	.word	0x080016e7
 8001664:	080016e7 	.word	0x080016e7
 8001668:	080016e7 	.word	0x080016e7
 800166c:	080016e7 	.word	0x080016e7
 8001670:	080016e7 	.word	0x080016e7
 8001674:	080016e7 	.word	0x080016e7
 8001678:	080016e7 	.word	0x080016e7
 800167c:	08001695 	.word	0x08001695
 8001680:	080016a9 	.word	0x080016a9
 8001684:	4a79      	ldr	r2, [pc, #484]	@ (800186c <HAL_GPIO_Init+0x2b4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800168a:	e02c      	b.n	80016e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e029      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	3304      	adds	r3, #4
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e024      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	3308      	adds	r3, #8
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e01f      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	330c      	adds	r3, #12
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e01a      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ba:	2304      	movs	r3, #4
 80016bc:	623b      	str	r3, [r7, #32]
          break;
 80016be:	e013      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c8:	2308      	movs	r3, #8
 80016ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	611a      	str	r2, [r3, #16]
          break;
 80016d2:	e009      	b.n	80016e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	615a      	str	r2, [r3, #20]
          break;
 80016de:	e003      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e000      	b.n	80016e8 <HAL_GPIO_Init+0x130>
          break;
 80016e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2bff      	cmp	r3, #255	@ 0xff
 80016ec:	d801      	bhi.n	80016f2 <HAL_GPIO_Init+0x13a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	e001      	b.n	80016f6 <HAL_GPIO_Init+0x13e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	@ 0xff
 80016fc:	d802      	bhi.n	8001704 <HAL_GPIO_Init+0x14c>
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x152>
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	3b08      	subs	r3, #8
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	210f      	movs	r1, #15
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	6a39      	ldr	r1, [r7, #32]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80b1 	beq.w	800189a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001738:	4b4d      	ldr	r3, [pc, #308]	@ (8001870 <HAL_GPIO_Init+0x2b8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	4a4c      	ldr	r2, [pc, #304]	@ (8001870 <HAL_GPIO_Init+0x2b8>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6193      	str	r3, [r2, #24]
 8001744:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <HAL_GPIO_Init+0x2b8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001750:	4a48      	ldr	r2, [pc, #288]	@ (8001874 <HAL_GPIO_Init+0x2bc>)
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a40      	ldr	r2, [pc, #256]	@ (8001878 <HAL_GPIO_Init+0x2c0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d013      	beq.n	80017a4 <HAL_GPIO_Init+0x1ec>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a3f      	ldr	r2, [pc, #252]	@ (800187c <HAL_GPIO_Init+0x2c4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00d      	beq.n	80017a0 <HAL_GPIO_Init+0x1e8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3e      	ldr	r2, [pc, #248]	@ (8001880 <HAL_GPIO_Init+0x2c8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x1e4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3d      	ldr	r2, [pc, #244]	@ (8001884 <HAL_GPIO_Init+0x2cc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_GPIO_Init+0x1e0>
 8001794:	2303      	movs	r3, #3
 8001796:	e006      	b.n	80017a6 <HAL_GPIO_Init+0x1ee>
 8001798:	2304      	movs	r3, #4
 800179a:	e004      	b.n	80017a6 <HAL_GPIO_Init+0x1ee>
 800179c:	2302      	movs	r3, #2
 800179e:	e002      	b.n	80017a6 <HAL_GPIO_Init+0x1ee>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_GPIO_Init+0x1ee>
 80017a4:	2300      	movs	r3, #0
 80017a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a8:	f002 0203 	and.w	r2, r2, #3
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	4093      	lsls	r3, r2
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b6:	492f      	ldr	r1, [pc, #188]	@ (8001874 <HAL_GPIO_Init+0x2bc>)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	3302      	adds	r3, #2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	492c      	ldr	r1, [pc, #176]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4928      	ldr	r1, [pc, #160]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017f8:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4922      	ldr	r1, [pc, #136]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	60cb      	str	r3, [r1, #12]
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	43db      	mvns	r3, r3
 800180e:	491e      	ldr	r1, [pc, #120]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 8001810:	4013      	ands	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001820:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4918      	ldr	r1, [pc, #96]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	43db      	mvns	r3, r3
 8001836:	4914      	ldr	r1, [pc, #80]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 8001838:	4013      	ands	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d021      	beq.n	800188c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001848:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	490e      	ldr	r1, [pc, #56]	@ (8001888 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
 8001854:	e021      	b.n	800189a <HAL_GPIO_Init+0x2e2>
 8001856:	bf00      	nop
 8001858:	10320000 	.word	0x10320000
 800185c:	10310000 	.word	0x10310000
 8001860:	10220000 	.word	0x10220000
 8001864:	10210000 	.word	0x10210000
 8001868:	10120000 	.word	0x10120000
 800186c:	10110000 	.word	0x10110000
 8001870:	40021000 	.word	0x40021000
 8001874:	40010000 	.word	0x40010000
 8001878:	40010800 	.word	0x40010800
 800187c:	40010c00 	.word	0x40010c00
 8001880:	40011000 	.word	0x40011000
 8001884:	40011400 	.word	0x40011400
 8001888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_GPIO_Init+0x304>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	43db      	mvns	r3, r3
 8001894:	4909      	ldr	r1, [pc, #36]	@ (80018bc <HAL_GPIO_Init+0x304>)
 8001896:	4013      	ands	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f47f ae8e 	bne.w	80015cc <HAL_GPIO_Init+0x14>
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	372c      	adds	r7, #44	@ 0x2c
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40010400 	.word	0x40010400

080018c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fe:	787b      	ldrb	r3, [r7, #1]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001904:	887a      	ldrh	r2, [r7, #2]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800190a:	e003      	b.n	8001914 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	041a      	lsls	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	611a      	str	r2, [r3, #16]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	041a      	lsls	r2, r3, #16
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43d9      	mvns	r1, r3
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	400b      	ands	r3, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e12b      	b.n	8001bba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe ff26 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2224      	movs	r2, #36	@ 0x24
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019b4:	f000 fcda 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 80019b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a81      	ldr	r2, [pc, #516]	@ (8001bc4 <HAL_I2C_Init+0x274>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d807      	bhi.n	80019d4 <HAL_I2C_Init+0x84>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4a80      	ldr	r2, [pc, #512]	@ (8001bc8 <HAL_I2C_Init+0x278>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf94      	ite	ls
 80019cc:	2301      	movls	r3, #1
 80019ce:	2300      	movhi	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e006      	b.n	80019e2 <HAL_I2C_Init+0x92>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bcc <HAL_I2C_Init+0x27c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	bf94      	ite	ls
 80019dc:	2301      	movls	r3, #1
 80019de:	2300      	movhi	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0e7      	b.n	8001bba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4a78      	ldr	r2, [pc, #480]	@ (8001bd0 <HAL_I2C_Init+0x280>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4a6a      	ldr	r2, [pc, #424]	@ (8001bc4 <HAL_I2C_Init+0x274>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d802      	bhi.n	8001a24 <HAL_I2C_Init+0xd4>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3301      	adds	r3, #1
 8001a22:	e009      	b.n	8001a38 <HAL_I2C_Init+0xe8>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a2a:	fb02 f303 	mul.w	r3, r2, r3
 8001a2e:	4a69      	ldr	r2, [pc, #420]	@ (8001bd4 <HAL_I2C_Init+0x284>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	3301      	adds	r3, #1
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	495c      	ldr	r1, [pc, #368]	@ (8001bc4 <HAL_I2C_Init+0x274>)
 8001a54:	428b      	cmp	r3, r1
 8001a56:	d819      	bhi.n	8001a8c <HAL_I2C_Init+0x13c>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e59      	subs	r1, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a66:	1c59      	adds	r1, r3, #1
 8001a68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_I2C_Init+0x138>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1e59      	subs	r1, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a86:	e051      	b.n	8001b2c <HAL_I2C_Init+0x1dc>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e04f      	b.n	8001b2c <HAL_I2C_Init+0x1dc>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d111      	bne.n	8001ab8 <HAL_I2C_Init+0x168>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	440b      	add	r3, r1
 8001aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e012      	b.n	8001ade <HAL_I2C_Init+0x18e>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1e58      	subs	r0, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	0099      	lsls	r1, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Init+0x196>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e022      	b.n	8001b2c <HAL_I2C_Init+0x1dc>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10e      	bne.n	8001b0c <HAL_I2C_Init+0x1bc>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e58      	subs	r0, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b0a:	e00f      	b.n	8001b2c <HAL_I2C_Init+0x1dc>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e58      	subs	r0, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	0099      	lsls	r1, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	6809      	ldr	r1, [r1, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69da      	ldr	r2, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6911      	ldr	r1, [r2, #16]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68d2      	ldr	r2, [r2, #12]
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	000186a0 	.word	0x000186a0
 8001bc8:	001e847f 	.word	0x001e847f
 8001bcc:	003d08ff 	.word	0x003d08ff
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	10624dd3 	.word	0x10624dd3

08001bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e272      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8087 	beq.w	8001d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d00c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c04:	4b8f      	ldr	r3, [pc, #572]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d112      	bne.n	8001c36 <HAL_RCC_OscConfig+0x5e>
 8001c10:	4b8c      	ldr	r3, [pc, #560]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1c:	d10b      	bne.n	8001c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	4b89      	ldr	r3, [pc, #548]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d06c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x12c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d168      	bne.n	8001d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e24c      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x76>
 8001c40:	4b80      	ldr	r3, [pc, #512]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a7f      	ldr	r2, [pc, #508]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e02e      	b.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x98>
 8001c56:	4b7b      	ldr	r3, [pc, #492]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b78      	ldr	r3, [pc, #480]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a77      	ldr	r2, [pc, #476]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01d      	b.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0xbc>
 8001c7a:	4b72      	ldr	r3, [pc, #456]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a71      	ldr	r2, [pc, #452]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b6f      	ldr	r3, [pc, #444]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c94:	4b6b      	ldr	r3, [pc, #428]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6a      	ldr	r2, [pc, #424]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b68      	ldr	r3, [pc, #416]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a67      	ldr	r2, [pc, #412]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ff3e 	bl	8000b34 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7fe ff3a 	bl	8000b34 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	@ 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e200      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b5d      	ldr	r3, [pc, #372]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe4>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff2a 	bl	8000b34 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7fe ff26 	bl	8000b34 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1ec      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x10c>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d063      	beq.n	8001dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d12:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1e:	4b49      	ldr	r3, [pc, #292]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d11c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x18c>
 8001d2a:	4b46      	ldr	r3, [pc, #280]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x176>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1c0      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4939      	ldr	r1, [pc, #228]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e03a      	b.n	8001dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b36      	ldr	r3, [pc, #216]	@ (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fedf 	bl	8000b34 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7fe fedb 	bl	8000b34 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1a1      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4927      	ldr	r1, [pc, #156]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b26      	ldr	r3, [pc, #152]	@ (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7fe febe 	bl	8000b34 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7fe feba 	bl	8000b34 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e180      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d03a      	beq.n	8001e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d019      	beq.n	8001e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dee:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_RCC_OscConfig+0x274>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7fe fe9e 	bl	8000b34 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7fe fe9a 	bl	8000b34 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e160      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 fafe 	bl	800241c <RCC_Delay>
 8001e20:	e01c      	b.n	8001e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_RCC_OscConfig+0x274>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7fe fe84 	bl	8000b34 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2e:	e00f      	b.n	8001e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e30:	f7fe fe80 	bl	8000b34 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d908      	bls.n	8001e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e146      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	42420000 	.word	0x42420000
 8001e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b92      	ldr	r3, [pc, #584]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e9      	bne.n	8001e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a6 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b88      	ldr	r3, [pc, #544]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a87      	ldr	r2, [pc, #540]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b85      	ldr	r3, [pc, #532]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b82      	ldr	r3, [pc, #520]	@ (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b7f      	ldr	r3, [pc, #508]	@ (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a7e      	ldr	r2, [pc, #504]	@ (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7fe fe41 	bl	8000b34 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7fe fe3d 	bl	8000b34 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	@ 0x64
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e103      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x312>
 8001edc:	4b6f      	ldr	r3, [pc, #444]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e02d      	b.n	8001f46 <HAL_RCC_OscConfig+0x36e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x334>
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a69      	ldr	r2, [pc, #420]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b67      	ldr	r3, [pc, #412]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a66      	ldr	r2, [pc, #408]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	e01c      	b.n	8001f46 <HAL_RCC_OscConfig+0x36e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x356>
 8001f14:	4b61      	ldr	r3, [pc, #388]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a60      	ldr	r2, [pc, #384]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	4b5e      	ldr	r3, [pc, #376]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a5d      	ldr	r2, [pc, #372]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCC_OscConfig+0x36e>
 8001f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a5a      	ldr	r2, [pc, #360]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	4b58      	ldr	r3, [pc, #352]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a57      	ldr	r2, [pc, #348]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d015      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7fe fdf1 	bl	8000b34 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7fe fded 	bl	8000b34 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0b1      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ee      	beq.n	8001f56 <HAL_RCC_OscConfig+0x37e>
 8001f78:	e014      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe fddb 	bl	8000b34 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fdd7 	bl	8000b34 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e09b      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	4b40      	ldr	r3, [pc, #256]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ee      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b3c      	ldr	r3, [pc, #240]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8087 	beq.w	80020ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc0:	4b36      	ldr	r3, [pc, #216]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d061      	beq.n	8002090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d146      	bne.n	8002062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b33      	ldr	r3, [pc, #204]	@ (80020a4 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fdab 	bl	8000b34 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe fda7 	bl	8000b34 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e06d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	4b29      	ldr	r3, [pc, #164]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4921      	ldr	r1, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201c:	4b1f      	ldr	r3, [pc, #124]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a19      	ldr	r1, [r3, #32]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	430b      	orrs	r3, r1
 800202e:	491b      	ldr	r1, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x4cc>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7fe fd7b 	bl	8000b34 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7fe fd77 	bl	8000b34 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e03d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x46a>
 8002060:	e035      	b.n	80020ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fd64 	bl	8000b34 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe fd60 	bl	8000b34 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e026      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x498>
 800208e:	e01e      	b.n	80020ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e019      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x500>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d0      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b67      	ldr	r3, [pc, #412]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4965      	ldr	r1, [pc, #404]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800215a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d040      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e073      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b3d      	ldr	r3, [pc, #244]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06b      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b39      	ldr	r3, [pc, #228]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4936      	ldr	r1, [pc, #216]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7fe fcb2 	bl	8000b34 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7fe fcae 	bl	8000b34 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e053      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d210      	bcs.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b24      	ldr	r3, [pc, #144]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4922      	ldr	r1, [pc, #136]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	@ (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fb26 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08004e64 	.word	0x08004e64
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x30>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x36>
 80022de:	e027      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e2:	613b      	str	r3, [r7, #16]
      break;
 80022e4:	e027      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	4a17      	ldr	r2, [pc, #92]	@ (800234c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022fe:	4b11      	ldr	r3, [pc, #68]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0c5b      	lsrs	r3, r3, #17
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	4a11      	ldr	r2, [pc, #68]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa0>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	fb03 f202 	mul.w	r2, r3, r2
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e004      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	613b      	str	r3, [r7, #16]
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	693b      	ldr	r3, [r7, #16]
}
 8002338:	4618      	mov	r0, r3
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	007a1200 	.word	0x007a1200
 800234c:	08004e7c 	.word	0x08004e7c
 8002350:	08004e8c 	.word	0x08004e8c
 8002354:	003d0900 	.word	0x003d0900

08002358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b02      	ldr	r3, [pc, #8]	@ (8002368 <HAL_RCC_GetHCLKFreq+0x10>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000000 	.word	0x20000000

0800236c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002370:	f7ff fff2 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4903      	ldr	r1, [pc, #12]	@ (8002390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	08004e74 	.word	0x08004e74

08002394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002398:	f7ff ffde 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	0adb      	lsrs	r3, r3, #11
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	@ (80023b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08004e74 	.word	0x08004e74

080023bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	220f      	movs	r2, #15
 80023ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_RCC_GetClockConfig+0x58>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_RCC_GetClockConfig+0x58>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_GetClockConfig+0x58>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023f0:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <HAL_RCC_GetClockConfig+0x58>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_RCC_GetClockConfig+0x5c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0207 	and.w	r2, r3, #7
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000
 8002418:	40022000 	.word	0x40022000

0800241c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <RCC_Delay+0x34>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <RCC_Delay+0x38>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0a5b      	lsrs	r3, r3, #9
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	fb02 f303 	mul.w	r3, r2, r3
 8002436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002438:	bf00      	nop
  }
  while (Delay --);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1e5a      	subs	r2, r3, #1
 800243e:	60fa      	str	r2, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f9      	bne.n	8002438 <RCC_Delay+0x1c>
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	20000000 	.word	0x20000000
 8002454:	10624dd3 	.word	0x10624dd3

08002458 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d07d      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002478:	4b4f      	ldr	r3, [pc, #316]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b4c      	ldr	r3, [pc, #304]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a4b      	ldr	r2, [pc, #300]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248e:	61d3      	str	r3, [r2, #28]
 8002490:	4b49      	ldr	r3, [pc, #292]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249c:	2301      	movs	r3, #1
 800249e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b46      	ldr	r3, [pc, #280]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d118      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a42      	ldr	r2, [pc, #264]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b8:	f7fe fb3c 	bl	8000b34 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024be:	e008      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7fe fb38 	bl	8000b34 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e06d      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024de:	4b36      	ldr	r3, [pc, #216]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02e      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d027      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024fc:	4b2e      	ldr	r3, [pc, #184]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002504:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002506:	4b2e      	ldr	r3, [pc, #184]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800250c:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002512:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fb07 	bl	8000b34 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fb03 	bl	8000b34 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e036      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4917      	ldr	r1, [pc, #92]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	4313      	orrs	r3, r2
 800255c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800255e:	7dfb      	ldrb	r3, [r7, #23]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	490b      	ldr	r1, [pc, #44]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800259a:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4904      	ldr	r1, [pc, #16]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42420440 	.word	0x42420440

080025c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	f200 808a 	bhi.w	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d045      	beq.n	8002680 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d075      	beq.n	80026e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80025fa:	e082      	b.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80025fc:	4b46      	ldr	r3, [pc, #280]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002602:	4b45      	ldr	r3, [pc, #276]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07b      	beq.n	8002706 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0c9b      	lsrs	r3, r3, #18
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	4a41      	ldr	r2, [pc, #260]	@ (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d015      	beq.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002626:	4b3c      	ldr	r3, [pc, #240]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0c5b      	lsrs	r3, r3, #17
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	4a3b      	ldr	r2, [pc, #236]	@ (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002640:	4a38      	ldr	r2, [pc, #224]	@ (8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	fbb2 f2f3 	udiv	r2, r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	e004      	b.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4a34      	ldr	r2, [pc, #208]	@ (8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800265c:	4b2e      	ldr	r3, [pc, #184]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002668:	d102      	bne.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	61bb      	str	r3, [r7, #24]
      break;
 800266e:	e04a      	b.n	8002706 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4a2d      	ldr	r2, [pc, #180]	@ (800272c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
      break;
 800267e:	e042      	b.n	8002706 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800268c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002690:	d108      	bne.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800269c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	e01f      	b.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ae:	d109      	bne.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80026bc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e00f      	b.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026ce:	d11c      	bne.n	800270a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80026dc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80026e0:	61bb      	str	r3, [r7, #24]
      break;
 80026e2:	e012      	b.n	800270a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026e4:	e011      	b.n	800270a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026e6:	f7ff fe55 	bl	8002394 <HAL_RCC_GetPCLK2Freq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0b9b      	lsrs	r3, r3, #14
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	61bb      	str	r3, [r7, #24]
      break;
 8002700:	e004      	b.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002702:	bf00      	nop
 8002704:	e002      	b.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800270a:	bf00      	nop
    }
  }
  return (frequency);
 800270c:	69bb      	ldr	r3, [r7, #24]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	08004e90 	.word	0x08004e90
 8002720:	08004ea0 	.word	0x08004ea0
 8002724:	007a1200 	.word	0x007a1200
 8002728:	003d0900 	.word	0x003d0900
 800272c:	aaaaaaab 	.word	0xaaaaaaab

08002730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e041      	b.n	80027c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f839 	bl	80027ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f000 f99c 	bl	8002aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e03a      	b.n	800286e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <HAL_TIM_Base_Start_IT+0x98>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00e      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x58>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002822:	d009      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x58>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <HAL_TIM_Base_Start_IT+0x9c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_TIM_Base_Start_IT+0x58>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_TIM_Base_Start_IT+0xa0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d111      	bne.n	800285c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b06      	cmp	r3, #6
 8002848:	d010      	beq.n	800286c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	e007      	b.n	800286c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800

08002884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0202 	mvn.w	r2, #2
 80028b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8d1 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f8c4 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8d3 	bl	8002a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d020      	beq.n	8002934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0204 	mvn.w	r2, #4
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8ab 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f89e 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8ad 	bl	8002a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0208 	mvn.w	r2, #8
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2204      	movs	r2, #4
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f885 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f878 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f887 	bl	8002a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d020      	beq.n	80029cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0210 	mvn.w	r2, #16
 800299c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2208      	movs	r2, #8
 80029a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f85f 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e005      	b.n	80029c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f852 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f861 	bl	8002a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0201 	mvn.w	r2, #1
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fd fe60 	bl	80006b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8c3 	bl	8002b9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f831 	bl	8002a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0220 	mvn.w	r2, #32
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f896 	bl	8002b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a2f      	ldr	r2, [pc, #188]	@ (8002b7c <TIM_Base_SetConfig+0xd0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <TIM_Base_SetConfig+0x30>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aca:	d007      	beq.n	8002adc <TIM_Base_SetConfig+0x30>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a2c      	ldr	r2, [pc, #176]	@ (8002b80 <TIM_Base_SetConfig+0xd4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0x30>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8002b84 <TIM_Base_SetConfig+0xd8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d108      	bne.n	8002aee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <TIM_Base_SetConfig+0xd0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0x62>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0x62>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1f      	ldr	r2, [pc, #124]	@ (8002b80 <TIM_Base_SetConfig+0xd4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0x62>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <TIM_Base_SetConfig+0xd8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0d      	ldr	r2, [pc, #52]	@ (8002b7c <TIM_Base_SetConfig+0xd0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d103      	bne.n	8002b54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f023 0201 	bic.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]
  }
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800

08002b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e042      	b.n	8002c44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fe36 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	@ 0x24
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f971 	bl	8002ed8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	@ 0x28
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d175      	bne.n	8002d58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Transmit+0x2c>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e06e      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2221      	movs	r2, #33	@ 0x21
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8a:	f7fd ff53 	bl	8000b34 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca4:	d108      	bne.n	8002cb8 <HAL_UART_Transmit+0x6c>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e003      	b.n	8002cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc0:	e02e      	b.n	8002d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2180      	movs	r1, #128	@ 0x80
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f848 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e03a      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e007      	b.n	8002d12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1cb      	bne.n	8002cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2140      	movs	r1, #64	@ 0x40
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f814 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	e03b      	b.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d037      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7c:	f7fd feda 	bl	8000b34 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e03a      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d023      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d020      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d01d      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d116      	bne.n	8002dec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f81d 	bl	8002e14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2208      	movs	r2, #8
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e00f      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d0b4      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b095      	sub	sp, #84	@ 0x54
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	e853 3f00 	ldrex	r3, [r3]
 8002e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e44:	e841 2300 	strex	r3, r2, [r1]
 8002e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e5      	bne.n	8002e1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3314      	adds	r3, #20
 8002e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e78:	e841 2300 	strex	r3, r2, [r1]
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e5      	bne.n	8002e50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d119      	bne.n	8002ec0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 0310 	bic.w	r3, r3, #16
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eac:	61ba      	str	r2, [r7, #24]
 8002eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6979      	ldr	r1, [r7, #20]
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ece:	bf00      	nop
 8002ed0:	3754      	adds	r7, #84	@ 0x54
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f12:	f023 030c 	bic.w	r3, r3, #12
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fec <UART_SetConfig+0x114>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d103      	bne.n	8002f48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7ff fa28 	bl	8002394 <HAL_RCC_GetPCLK2Freq>
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	e002      	b.n	8002f4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f48:	f7ff fa10 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 8002f4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <UART_SetConfig+0x118>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	0119      	lsls	r1, r3, #4
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <UART_SetConfig+0x118>)
 8002f86:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2064      	movs	r0, #100	@ 0x64
 8002f8e:	fb00 f303 	mul.w	r3, r0, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3332      	adds	r3, #50	@ 0x32
 8002f98:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <UART_SetConfig+0x118>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa4:	4419      	add	r1, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <UART_SetConfig+0x118>)
 8002fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2064      	movs	r0, #100	@ 0x64
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	3332      	adds	r3, #50	@ 0x32
 8002fd0:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <UART_SetConfig+0x118>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	440a      	add	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	51eb851f 	.word	0x51eb851f

08002ff4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003006:	2b84      	cmp	r3, #132	@ 0x84
 8003008:	d005      	beq.n	8003016 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800300a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4413      	add	r3, r2
 8003012:	3303      	adds	r3, #3
 8003014:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003026:	f000 fadf 	bl	80035e8 <vTaskStartScheduler>
  
  return osOK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}

08003030 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	b089      	sub	sp, #36	@ 0x24
 8003034:	af04      	add	r7, sp, #16
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <osThreadCreate+0x54>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01c      	beq.n	8003084 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685c      	ldr	r4, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691e      	ldr	r6, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ffc9 	bl	8002ff4 <makeFreeRtosPriority>
 8003062:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800306c:	9202      	str	r2, [sp, #8]
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	9100      	str	r1, [sp, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4632      	mov	r2, r6
 8003076:	4629      	mov	r1, r5
 8003078:	4620      	mov	r0, r4
 800307a:	f000 f8e8 	bl	800324e <xTaskCreateStatic>
 800307e:	4603      	mov	r3, r0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e01c      	b.n	80030be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685c      	ldr	r4, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003090:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffab 	bl	8002ff4 <makeFreeRtosPriority>
 800309e:	4602      	mov	r2, r0
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	9200      	str	r2, [sp, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4632      	mov	r2, r6
 80030ac:	4629      	mov	r1, r5
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f92d 	bl	800330e <xTaskCreate>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d001      	beq.n	80030be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <osDelay+0x16>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	e000      	b.n	80030e0 <osDelay+0x18>
 80030de:	2301      	movs	r3, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fa4b 	bl	800357c <vTaskDelay>
  
  return osOK;
 80030e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f103 0208 	add.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f103 0208 	add.w	r2, r3, #8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f103 0208 	add.w	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d103      	bne.n	80031ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e00c      	b.n	80031c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3308      	adds	r3, #8
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	e002      	b.n	80031ba <vListInsert+0x2e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d2f6      	bcs.n	80031b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6892      	ldr	r2, [r2, #8]
 8003212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6852      	ldr	r2, [r2, #4]
 800321c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d103      	bne.n	8003230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08e      	sub	sp, #56	@ 0x38
 8003252:	af04      	add	r7, sp, #16
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800325c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10b      	bne.n	800327a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61fb      	str	r3, [r7, #28]
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003298:	2354      	movs	r3, #84	@ 0x54
 800329a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b54      	cmp	r3, #84	@ 0x54
 80032a0:	d00b      	beq.n	80032ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	61bb      	str	r3, [r7, #24]
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	e7fd      	b.n	80032b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01e      	beq.n	8003300 <xTaskCreateStatic+0xb2>
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01b      	beq.n	8003300 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032da:	2300      	movs	r3, #0
 80032dc:	9303      	str	r3, [sp, #12]
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	9302      	str	r3, [sp, #8]
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f850 	bl	8003398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032fa:	f000 f8d5 	bl	80034a8 <prvAddNewTaskToReadyList>
 80032fe:	e001      	b.n	8003304 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003304:	697b      	ldr	r3, [r7, #20]
	}
 8003306:	4618      	mov	r0, r3
 8003308:	3728      	adds	r7, #40	@ 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800330e:	b580      	push	{r7, lr}
 8003310:	b08c      	sub	sp, #48	@ 0x30
 8003312:	af04      	add	r7, sp, #16
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fe74 	bl	8004010 <pvPortMalloc>
 8003328:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00e      	beq.n	800334e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003330:	2054      	movs	r0, #84	@ 0x54
 8003332:	f000 fe6d 	bl	8004010 <pvPortMalloc>
 8003336:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	631a      	str	r2, [r3, #48]	@ 0x30
 8003344:	e005      	b.n	8003352 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f000 ff30 	bl	80041ac <vPortFree>
 800334c:	e001      	b.n	8003352 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d017      	beq.n	8003388 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	2300      	movs	r3, #0
 8003364:	9303      	str	r3, [sp, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	9302      	str	r3, [sp, #8]
 800336a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f80e 	bl	8003398 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800337c:	69f8      	ldr	r0, [r7, #28]
 800337e:	f000 f893 	bl	80034a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003382:	2301      	movs	r3, #1
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e002      	b.n	800338e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800338e:	69bb      	ldr	r3, [r7, #24]
	}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033b0:	3b01      	subs	r3, #1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f023 0307 	bic.w	r3, r3, #7
 80033be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	617b      	str	r3, [r7, #20]
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	e7fd      	b.n	80033de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01f      	beq.n	8003428 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	e012      	b.n	8003414 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	7819      	ldrb	r1, [r3, #0]
 80033f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	3334      	adds	r3, #52	@ 0x34
 80033fe:	460a      	mov	r2, r1
 8003400:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3301      	adds	r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d9e9      	bls.n	80033ee <prvInitialiseNewTask+0x56>
 800341a:	e000      	b.n	800341e <prvInitialiseNewTask+0x86>
			{
				break;
 800341c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003426:	e003      	b.n	8003430 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003432:	2b06      	cmp	r3, #6
 8003434:	d901      	bls.n	800343a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003436:	2306      	movs	r3, #6
 8003438:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800343a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003448:	2200      	movs	r2, #0
 800344a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	3304      	adds	r3, #4
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fe6c 	bl	800312e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	3318      	adds	r3, #24
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fe67 	bl	800312e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003464:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	f1c3 0207 	rsb	r2, r3, #7
 800346c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	2200      	movs	r2, #0
 800347a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	68f9      	ldr	r1, [r7, #12]
 8003488:	69b8      	ldr	r0, [r7, #24]
 800348a:	f000 fc0d 	bl	8003ca8 <pxPortInitialiseStack>
 800348e:	4602      	mov	r2, r0
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a0:	bf00      	nop
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034b0:	f000 fcec 	bl	8003e8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <prvAddNewTaskToReadyList+0xb8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	4a29      	ldr	r2, [pc, #164]	@ (8003560 <prvAddNewTaskToReadyList+0xb8>)
 80034bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034be:	4b29      	ldr	r3, [pc, #164]	@ (8003564 <prvAddNewTaskToReadyList+0xbc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034c6:	4a27      	ldr	r2, [pc, #156]	@ (8003564 <prvAddNewTaskToReadyList+0xbc>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034cc:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <prvAddNewTaskToReadyList+0xb8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d110      	bne.n	80034f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034d4:	f000 fac4 	bl	8003a60 <prvInitialiseTaskLists>
 80034d8:	e00d      	b.n	80034f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034da:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <prvAddNewTaskToReadyList+0xc0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034e2:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <prvAddNewTaskToReadyList+0xbc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d802      	bhi.n	80034f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <prvAddNewTaskToReadyList+0xbc>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034f6:	4b1d      	ldr	r3, [pc, #116]	@ (800356c <prvAddNewTaskToReadyList+0xc4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <prvAddNewTaskToReadyList+0xc4>)
 80034fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	2201      	movs	r2, #1
 8003506:	409a      	lsls	r2, r3
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <prvAddNewTaskToReadyList+0xc8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <prvAddNewTaskToReadyList+0xc8>)
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4a15      	ldr	r2, [pc, #84]	@ (8003574 <prvAddNewTaskToReadyList+0xcc>)
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7ff fe0c 	bl	8003146 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800352e:	f000 fcdd 	bl	8003eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003532:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <prvAddNewTaskToReadyList+0xc0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800353a:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <prvAddNewTaskToReadyList+0xbc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	429a      	cmp	r2, r3
 8003546:	d207      	bcs.n	8003558 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <prvAddNewTaskToReadyList+0xd0>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000051c 	.word	0x2000051c
 8003564:	2000041c 	.word	0x2000041c
 8003568:	20000528 	.word	0x20000528
 800356c:	20000538 	.word	0x20000538
 8003570:	20000524 	.word	0x20000524
 8003574:	20000420 	.word	0x20000420
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800358e:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <vTaskDelay+0x64>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <vTaskDelay+0x32>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035ae:	f000 f87d 	bl	80036ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b2:	2100      	movs	r1, #0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb11 	bl	8003bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035ba:	f000 f885 	bl	80036c8 <xTaskResumeAll>
 80035be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80035c6:	4b07      	ldr	r3, [pc, #28]	@ (80035e4 <vTaskDelay+0x68>)
 80035c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000544 	.word	0x20000544
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035f6:	463a      	mov	r2, r7
 80035f8:	1d39      	adds	r1, r7, #4
 80035fa:	f107 0308 	add.w	r3, r7, #8
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fdae 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2300      	movs	r3, #0
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	460a      	mov	r2, r1
 8003616:	491f      	ldr	r1, [pc, #124]	@ (8003694 <vTaskStartScheduler+0xac>)
 8003618:	481f      	ldr	r0, [pc, #124]	@ (8003698 <vTaskStartScheduler+0xb0>)
 800361a:	f7ff fe18 	bl	800324e <xTaskCreateStatic>
 800361e:	4603      	mov	r3, r0
 8003620:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <vTaskStartScheduler+0xb4>)
 8003622:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003624:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <vTaskStartScheduler+0xb4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e001      	b.n	8003636 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d116      	bne.n	800366a <vTaskStartScheduler+0x82>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	613b      	str	r3, [r7, #16]
}
 800364e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <vTaskStartScheduler+0xb8>)
 8003652:	f04f 32ff 	mov.w	r2, #4294967295
 8003656:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003658:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <vTaskStartScheduler+0xbc>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <vTaskStartScheduler+0xc0>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003664:	f000 fba0 	bl	8003da8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003668:	e00f      	b.n	800368a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d10b      	bne.n	800368a <vTaskStartScheduler+0xa2>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60fb      	str	r3, [r7, #12]
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	e7fd      	b.n	8003686 <vTaskStartScheduler+0x9e>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	08004e5c 	.word	0x08004e5c
 8003698:	08003a31 	.word	0x08003a31
 800369c:	20000540 	.word	0x20000540
 80036a0:	2000053c 	.word	0x2000053c
 80036a4:	20000528 	.word	0x20000528
 80036a8:	20000520 	.word	0x20000520

080036ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036b0:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <vTaskSuspendAll+0x18>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a03      	ldr	r2, [pc, #12]	@ (80036c4 <vTaskSuspendAll+0x18>)
 80036b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000544 	.word	0x20000544

080036c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036d6:	4b42      	ldr	r3, [pc, #264]	@ (80037e0 <xTaskResumeAll+0x118>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	603b      	str	r3, [r7, #0]
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	e7fd      	b.n	80036f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036f6:	f000 fbc9 	bl	8003e8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036fa:	4b39      	ldr	r3, [pc, #228]	@ (80037e0 <xTaskResumeAll+0x118>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3b01      	subs	r3, #1
 8003700:	4a37      	ldr	r2, [pc, #220]	@ (80037e0 <xTaskResumeAll+0x118>)
 8003702:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003704:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <xTaskResumeAll+0x118>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d161      	bne.n	80037d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800370c:	4b35      	ldr	r3, [pc, #212]	@ (80037e4 <xTaskResumeAll+0x11c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05d      	beq.n	80037d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003714:	e02e      	b.n	8003774 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003716:	4b34      	ldr	r3, [pc, #208]	@ (80037e8 <xTaskResumeAll+0x120>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3318      	adds	r3, #24
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fd6a 	bl	80031fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fd65 	bl	80031fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	2201      	movs	r2, #1
 8003738:	409a      	lsls	r2, r3
 800373a:	4b2c      	ldr	r3, [pc, #176]	@ (80037ec <xTaskResumeAll+0x124>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	4a2a      	ldr	r2, [pc, #168]	@ (80037ec <xTaskResumeAll+0x124>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4a27      	ldr	r2, [pc, #156]	@ (80037f0 <xTaskResumeAll+0x128>)
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7ff fcf3 	bl	8003146 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003764:	4b23      	ldr	r3, [pc, #140]	@ (80037f4 <xTaskResumeAll+0x12c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800376e:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <xTaskResumeAll+0x130>)
 8003770:	2201      	movs	r2, #1
 8003772:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003774:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <xTaskResumeAll+0x120>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1cc      	bne.n	8003716 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003782:	f000 fa0b 	bl	8003b9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <xTaskResumeAll+0x134>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003792:	f000 f837 	bl	8003804 <xTaskIncrementTick>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800379c:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <xTaskResumeAll+0x130>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f1      	bne.n	8003792 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037ae:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <xTaskResumeAll+0x134>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037b4:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <xTaskResumeAll+0x130>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <xTaskResumeAll+0x138>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037d0:	f000 fb8c 	bl	8003eec <vPortExitCritical>

	return xAlreadyYielded;
 80037d4:	68bb      	ldr	r3, [r7, #8]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000544 	.word	0x20000544
 80037e4:	2000051c 	.word	0x2000051c
 80037e8:	200004dc 	.word	0x200004dc
 80037ec:	20000524 	.word	0x20000524
 80037f0:	20000420 	.word	0x20000420
 80037f4:	2000041c 	.word	0x2000041c
 80037f8:	20000530 	.word	0x20000530
 80037fc:	2000052c 	.word	0x2000052c
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380e:	4b4f      	ldr	r3, [pc, #316]	@ (800394c <xTaskIncrementTick+0x148>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 808f 	bne.w	8003936 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003818:	4b4d      	ldr	r3, [pc, #308]	@ (8003950 <xTaskIncrementTick+0x14c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003820:	4a4b      	ldr	r2, [pc, #300]	@ (8003950 <xTaskIncrementTick+0x14c>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d121      	bne.n	8003870 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800382c:	4b49      	ldr	r3, [pc, #292]	@ (8003954 <xTaskIncrementTick+0x150>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	603b      	str	r3, [r7, #0]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <xTaskIncrementTick+0x46>
 800384e:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <xTaskIncrementTick+0x150>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <xTaskIncrementTick+0x154>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3e      	ldr	r2, [pc, #248]	@ (8003954 <xTaskIncrementTick+0x150>)
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4a3e      	ldr	r2, [pc, #248]	@ (8003958 <xTaskIncrementTick+0x154>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <xTaskIncrementTick+0x158>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	4a3c      	ldr	r2, [pc, #240]	@ (800395c <xTaskIncrementTick+0x158>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	f000 f996 	bl	8003b9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <xTaskIncrementTick+0x15c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	429a      	cmp	r2, r3
 8003878:	d348      	bcc.n	800390c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800387a:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <xTaskIncrementTick+0x150>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003884:	4b36      	ldr	r3, [pc, #216]	@ (8003960 <xTaskIncrementTick+0x15c>)
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	601a      	str	r2, [r3, #0]
					break;
 800388c:	e03e      	b.n	800390c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <xTaskIncrementTick+0x150>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d203      	bcs.n	80038ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <xTaskIncrementTick+0x15c>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038ac:	e02e      	b.n	800390c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fca2 	bl	80031fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fc99 	bl	80031fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	2201      	movs	r2, #1
 80038d0:	409a      	lsls	r2, r3
 80038d2:	4b24      	ldr	r3, [pc, #144]	@ (8003964 <xTaskIncrementTick+0x160>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <xTaskIncrementTick+0x160>)
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003968 <xTaskIncrementTick+0x164>)
 80038ea:	441a      	add	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7ff fc27 	bl	8003146 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fc:	4b1b      	ldr	r3, [pc, #108]	@ (800396c <xTaskIncrementTick+0x168>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	429a      	cmp	r2, r3
 8003904:	d3b9      	bcc.n	800387a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800390a:	e7b6      	b.n	800387a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800390c:	4b17      	ldr	r3, [pc, #92]	@ (800396c <xTaskIncrementTick+0x168>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003912:	4915      	ldr	r1, [pc, #84]	@ (8003968 <xTaskIncrementTick+0x164>)
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d901      	bls.n	8003928 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003928:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <xTaskIncrementTick+0x16c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003930:	2301      	movs	r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	e004      	b.n	8003940 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003936:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <xTaskIncrementTick+0x170>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <xTaskIncrementTick+0x170>)
 800393e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003940:	697b      	ldr	r3, [r7, #20]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000544 	.word	0x20000544
 8003950:	20000520 	.word	0x20000520
 8003954:	200004d4 	.word	0x200004d4
 8003958:	200004d8 	.word	0x200004d8
 800395c:	20000534 	.word	0x20000534
 8003960:	2000053c 	.word	0x2000053c
 8003964:	20000524 	.word	0x20000524
 8003968:	20000420 	.word	0x20000420
 800396c:	2000041c 	.word	0x2000041c
 8003970:	20000530 	.word	0x20000530
 8003974:	2000052c 	.word	0x2000052c

08003978 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800397e:	4b27      	ldr	r3, [pc, #156]	@ (8003a1c <vTaskSwitchContext+0xa4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003986:	4b26      	ldr	r3, [pc, #152]	@ (8003a20 <vTaskSwitchContext+0xa8>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800398c:	e040      	b.n	8003a10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <vTaskSwitchContext+0xa8>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	4b23      	ldr	r3, [pc, #140]	@ (8003a24 <vTaskSwitchContext+0xac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	f1c3 031f 	rsb	r3, r3, #31
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	491f      	ldr	r1, [pc, #124]	@ (8003a28 <vTaskSwitchContext+0xb0>)
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	607b      	str	r3, [r7, #4]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <vTaskSwitchContext+0x5a>
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4a11      	ldr	r2, [pc, #68]	@ (8003a28 <vTaskSwitchContext+0xb0>)
 80039e2:	4413      	add	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	3308      	adds	r3, #8
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d104      	bne.n	8003a06 <vTaskSwitchContext+0x8e>
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a07      	ldr	r2, [pc, #28]	@ (8003a2c <vTaskSwitchContext+0xb4>)
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	371c      	adds	r7, #28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000544 	.word	0x20000544
 8003a20:	20000530 	.word	0x20000530
 8003a24:	20000524 	.word	0x20000524
 8003a28:	20000420 	.word	0x20000420
 8003a2c:	2000041c 	.word	0x2000041c

08003a30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a38:	f000 f852 	bl	8003ae0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <prvIdleTask+0x28>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d9f9      	bls.n	8003a38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <prvIdleTask+0x2c>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a54:	e7f0      	b.n	8003a38 <prvIdleTask+0x8>
 8003a56:	bf00      	nop
 8003a58:	20000420 	.word	0x20000420
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	e00c      	b.n	8003a86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <prvInitialiseTaskLists+0x60>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fb38 	bl	80030f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3301      	adds	r3, #1
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b06      	cmp	r3, #6
 8003a8a:	d9ef      	bls.n	8003a6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a8c:	480d      	ldr	r0, [pc, #52]	@ (8003ac4 <prvInitialiseTaskLists+0x64>)
 8003a8e:	f7ff fb2f 	bl	80030f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a92:	480d      	ldr	r0, [pc, #52]	@ (8003ac8 <prvInitialiseTaskLists+0x68>)
 8003a94:	f7ff fb2c 	bl	80030f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a98:	480c      	ldr	r0, [pc, #48]	@ (8003acc <prvInitialiseTaskLists+0x6c>)
 8003a9a:	f7ff fb29 	bl	80030f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a9e:	480c      	ldr	r0, [pc, #48]	@ (8003ad0 <prvInitialiseTaskLists+0x70>)
 8003aa0:	f7ff fb26 	bl	80030f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003aa4:	480b      	ldr	r0, [pc, #44]	@ (8003ad4 <prvInitialiseTaskLists+0x74>)
 8003aa6:	f7ff fb23 	bl	80030f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <prvInitialiseTaskLists+0x78>)
 8003aac:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <prvInitialiseTaskLists+0x64>)
 8003aae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <prvInitialiseTaskLists+0x7c>)
 8003ab2:	4a05      	ldr	r2, [pc, #20]	@ (8003ac8 <prvInitialiseTaskLists+0x68>)
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000420 	.word	0x20000420
 8003ac4:	200004ac 	.word	0x200004ac
 8003ac8:	200004c0 	.word	0x200004c0
 8003acc:	200004dc 	.word	0x200004dc
 8003ad0:	200004f0 	.word	0x200004f0
 8003ad4:	20000508 	.word	0x20000508
 8003ad8:	200004d4 	.word	0x200004d4
 8003adc:	200004d8 	.word	0x200004d8

08003ae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae6:	e019      	b.n	8003b1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ae8:	f000 f9d0 	bl	8003e8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aec:	4b10      	ldr	r3, [pc, #64]	@ (8003b30 <prvCheckTasksWaitingTermination+0x50>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fb7f 	bl	80031fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <prvCheckTasksWaitingTermination+0x54>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	4a0b      	ldr	r2, [pc, #44]	@ (8003b34 <prvCheckTasksWaitingTermination+0x54>)
 8003b06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <prvCheckTasksWaitingTermination+0x58>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <prvCheckTasksWaitingTermination+0x58>)
 8003b10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b12:	f000 f9eb 	bl	8003eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f810 	bl	8003b3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b1c:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <prvCheckTasksWaitingTermination+0x58>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e1      	bne.n	8003ae8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200004f0 	.word	0x200004f0
 8003b34:	2000051c 	.word	0x2000051c
 8003b38:	20000504 	.word	0x20000504

08003b3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fb2a 	bl	80041ac <vPortFree>
				vPortFree( pxTCB );
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb27 	bl	80041ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b5e:	e019      	b.n	8003b94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d103      	bne.n	8003b72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fb1e 	bl	80041ac <vPortFree>
	}
 8003b70:	e010      	b.n	8003b94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d00b      	beq.n	8003b94 <prvDeleteTCB+0x58>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	60fb      	str	r3, [r7, #12]
}
 8003b8e:	bf00      	nop
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <prvDeleteTCB+0x54>
	}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <prvResetNextTaskUnblockTime+0x38>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d104      	bne.n	8003bb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bac:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <prvResetNextTaskUnblockTime+0x3c>)
 8003bae:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bb4:	e008      	b.n	8003bc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb6:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <prvResetNextTaskUnblockTime+0x38>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a04      	ldr	r2, [pc, #16]	@ (8003bd8 <prvResetNextTaskUnblockTime+0x3c>)
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200004d4 	.word	0x200004d4
 8003bd8:	2000053c 	.word	0x2000053c

08003bdc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003be6:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bec:	4b28      	ldr	r3, [pc, #160]	@ (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fb02 	bl	80031fc <uxListRemove>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bfe:	4b24      	ldr	r3, [pc, #144]	@ (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	2201      	movs	r2, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	4b21      	ldr	r3, [pc, #132]	@ (8003c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4013      	ands	r3, r2
 8003c12:	4a20      	ldr	r2, [pc, #128]	@ (8003c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d10a      	bne.n	8003c34 <prvAddCurrentTaskToDelayedList+0x58>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c24:	4b1a      	ldr	r3, [pc, #104]	@ (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	481a      	ldr	r0, [pc, #104]	@ (8003c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c2e:	f7ff fa8a 	bl	8003146 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c32:	e026      	b.n	8003c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d209      	bcs.n	8003c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7ff fa97 	bl	800318c <vListInsert>
}
 8003c5e:	e010      	b.n	8003c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff fa8d 	bl	800318c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d202      	bcs.n	8003c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	20000520 	.word	0x20000520
 8003c90:	2000041c 	.word	0x2000041c
 8003c94:	20000524 	.word	0x20000524
 8003c98:	20000508 	.word	0x20000508
 8003c9c:	200004d8 	.word	0x200004d8
 8003ca0:	200004d4 	.word	0x200004d4
 8003ca4:	2000053c 	.word	0x2000053c

08003ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3b04      	subs	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3b04      	subs	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cd8:	4a08      	ldr	r2, [pc, #32]	@ (8003cfc <pxPortInitialiseStack+0x54>)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3b14      	subs	r3, #20
 8003ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b20      	subs	r3, #32
 8003cee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	08003d01 	.word	0x08003d01

08003d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d0a:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <prvTaskExitError+0x54>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d12:	d00b      	beq.n	8003d2c <prvTaskExitError+0x2c>
	__asm volatile
 8003d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	60fb      	str	r3, [r7, #12]
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	e7fd      	b.n	8003d28 <prvTaskExitError+0x28>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60bb      	str	r3, [r7, #8]
}
 8003d3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d40:	bf00      	nop
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0fc      	beq.n	8003d42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	2000000c 	.word	0x2000000c
	...

08003d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d60:	4b07      	ldr	r3, [pc, #28]	@ (8003d80 <pxCurrentTCBConst2>)
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	6808      	ldr	r0, [r1, #0]
 8003d66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d6a:	f380 8809 	msr	PSP, r0
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f380 8811 	msr	BASEPRI, r0
 8003d7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003d7e:	4770      	bx	lr

08003d80 <pxCurrentTCBConst2>:
 8003d80:	2000041c 	.word	0x2000041c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop

08003d88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d88:	4806      	ldr	r0, [pc, #24]	@ (8003da4 <prvPortStartFirstTask+0x1c>)
 8003d8a:	6800      	ldr	r0, [r0, #0]
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f380 8808 	msr	MSP, r0
 8003d92:	b662      	cpsie	i
 8003d94:	b661      	cpsie	f
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	df00      	svc	0
 8003da0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003da2:	bf00      	nop
 8003da4:	e000ed08 	.word	0xe000ed08

08003da8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dae:	4b32      	ldr	r3, [pc, #200]	@ (8003e78 <xPortStartScheduler+0xd0>)
 8003db0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	22ff      	movs	r2, #255	@ 0xff
 8003dbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e7c <xPortStartScheduler+0xd4>)
 8003dd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003dd8:	2207      	movs	r2, #7
 8003dda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ddc:	e009      	b.n	8003df2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003dde:	4b28      	ldr	r3, [pc, #160]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	4a26      	ldr	r2, [pc, #152]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003de6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfa:	2b80      	cmp	r3, #128	@ 0x80
 8003dfc:	d0ef      	beq.n	8003dde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dfe:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1c3 0307 	rsb	r3, r3, #7
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d00b      	beq.n	8003e22 <xPortStartScheduler+0x7a>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	60bb      	str	r3, [r7, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	e7fd      	b.n	8003e1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e22:	4b17      	ldr	r3, [pc, #92]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	4a15      	ldr	r2, [pc, #84]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003e2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e34:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <xPortStartScheduler+0xd8>)
 8003e36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e40:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <xPortStartScheduler+0xdc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0f      	ldr	r2, [pc, #60]	@ (8003e84 <xPortStartScheduler+0xdc>)
 8003e46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <xPortStartScheduler+0xdc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0c      	ldr	r2, [pc, #48]	@ (8003e84 <xPortStartScheduler+0xdc>)
 8003e52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e58:	f000 f8b8 	bl	8003fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <xPortStartScheduler+0xe0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e62:	f7ff ff91 	bl	8003d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e66:	f7ff fd87 	bl	8003978 <vTaskSwitchContext>
	prvTaskExitError();
 8003e6a:	f7ff ff49 	bl	8003d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000e400 	.word	0xe000e400
 8003e7c:	20000548 	.word	0x20000548
 8003e80:	2000054c 	.word	0x2000054c
 8003e84:	e000ed20 	.word	0xe000ed20
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	607b      	str	r3, [r7, #4]
}
 8003ea4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <vPortEnterCritical+0x58>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee4 <vPortEnterCritical+0x58>)
 8003eae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <vPortEnterCritical+0x58>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d110      	bne.n	8003eda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <vPortEnterCritical+0x5c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <vPortEnterCritical+0x4e>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	603b      	str	r3, [r7, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <vPortEnterCritical+0x4a>
	}
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr
 8003ee4:	2000000c 	.word	0x2000000c
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ef2:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <vPortExitCritical+0x50>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <vPortExitCritical+0x26>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	607b      	str	r3, [r7, #4]
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	e7fd      	b.n	8003f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <vPortExitCritical+0x50>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <vPortExitCritical+0x50>)
 8003f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f1c:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <vPortExitCritical+0x50>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <vPortExitCritical+0x44>
 8003f24:	2300      	movs	r3, #0
 8003f26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	2000000c 	.word	0x2000000c

08003f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f40:	f3ef 8009 	mrs	r0, PSP
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <pxCurrentTCBConst>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f50:	6010      	str	r0, [r2, #0]
 8003f52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003f56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f5a:	f380 8811 	msr	BASEPRI, r0
 8003f5e:	f7ff fd0b 	bl	8003978 <vTaskSwitchContext>
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	6808      	ldr	r0, [r1, #0]
 8003f72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f76:	f380 8809 	msr	PSP, r0
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	4770      	bx	lr

08003f80 <pxCurrentTCBConst>:
 8003f80:	2000041c 	.word	0x2000041c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	607b      	str	r3, [r7, #4]
}
 8003fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fa2:	f7ff fc2f 	bl	8003804 <xTaskIncrementTick>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <SysTick_Handler+0x40>)
 8003fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f383 8811 	msr	BASEPRI, r3
}
 8003fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <vPortSetupTimerInterrupt+0x30>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004000 <vPortSetupTimerInterrupt+0x34>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fdc:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <vPortSetupTimerInterrupt+0x38>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a09      	ldr	r2, [pc, #36]	@ (8004008 <vPortSetupTimerInterrupt+0x3c>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	4a08      	ldr	r2, [pc, #32]	@ (800400c <vPortSetupTimerInterrupt+0x40>)
 8003fea:	3b01      	subs	r3, #1
 8003fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fee:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <vPortSetupTimerInterrupt+0x30>)
 8003ff0:	2207      	movs	r2, #7
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	e000e010 	.word	0xe000e010
 8004000:	e000e018 	.word	0xe000e018
 8004004:	20000000 	.word	0x20000000
 8004008:	10624dd3 	.word	0x10624dd3
 800400c:	e000e014 	.word	0xe000e014

08004010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800401c:	f7ff fb46 	bl	80036ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004020:	4b5c      	ldr	r3, [pc, #368]	@ (8004194 <pvPortMalloc+0x184>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004028:	f000 f924 	bl	8004274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800402c:	4b5a      	ldr	r3, [pc, #360]	@ (8004198 <pvPortMalloc+0x188>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8095 	bne.w	8004164 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01e      	beq.n	800407e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004040:	2208      	movs	r2, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	2b00      	cmp	r3, #0
 8004050:	d015      	beq.n	800407e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f023 0307 	bic.w	r3, r3, #7
 8004058:	3308      	adds	r3, #8
 800405a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <pvPortMalloc+0x6e>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	617b      	str	r3, [r7, #20]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d06f      	beq.n	8004164 <pvPortMalloc+0x154>
 8004084:	4b45      	ldr	r3, [pc, #276]	@ (800419c <pvPortMalloc+0x18c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d86a      	bhi.n	8004164 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800408e:	4b44      	ldr	r3, [pc, #272]	@ (80041a0 <pvPortMalloc+0x190>)
 8004090:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004092:	4b43      	ldr	r3, [pc, #268]	@ (80041a0 <pvPortMalloc+0x190>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004098:	e004      	b.n	80040a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d903      	bls.n	80040b6 <pvPortMalloc+0xa6>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f1      	bne.n	800409a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040b6:	4b37      	ldr	r3, [pc, #220]	@ (8004194 <pvPortMalloc+0x184>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040bc:	429a      	cmp	r2, r3
 80040be:	d051      	beq.n	8004164 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	4413      	add	r3, r2
 80040c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	2308      	movs	r3, #8
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	429a      	cmp	r2, r3
 80040e0:	d920      	bls.n	8004124 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <pvPortMalloc+0xfc>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800411e:	69b8      	ldr	r0, [r7, #24]
 8004120:	f000 f90a 	bl	8004338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004124:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <pvPortMalloc+0x18c>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <pvPortMalloc+0x18c>)
 8004130:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004132:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <pvPortMalloc+0x18c>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <pvPortMalloc+0x194>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d203      	bcs.n	8004146 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800413e:	4b17      	ldr	r3, [pc, #92]	@ (800419c <pvPortMalloc+0x18c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <pvPortMalloc+0x194>)
 8004144:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4b13      	ldr	r3, [pc, #76]	@ (8004198 <pvPortMalloc+0x188>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	431a      	orrs	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800415a:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <pvPortMalloc+0x198>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a11      	ldr	r2, [pc, #68]	@ (80041a8 <pvPortMalloc+0x198>)
 8004162:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004164:	f7ff fab0 	bl	80036c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <pvPortMalloc+0x17a>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	60fb      	str	r3, [r7, #12]
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	e7fd      	b.n	8004186 <pvPortMalloc+0x176>
	return pvReturn;
 800418a:	69fb      	ldr	r3, [r7, #28]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	@ 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20001368 	.word	0x20001368
 8004198:	2000137c 	.word	0x2000137c
 800419c:	2000136c 	.word	0x2000136c
 80041a0:	20001360 	.word	0x20001360
 80041a4:	20001370 	.word	0x20001370
 80041a8:	20001374 	.word	0x20001374

080041ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d04f      	beq.n	800425e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041be:	2308      	movs	r3, #8
 80041c0:	425b      	negs	r3, r3
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4413      	add	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	4b25      	ldr	r3, [pc, #148]	@ (8004268 <vPortFree+0xbc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <vPortFree+0x46>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <vPortFree+0x66>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <vPortFree+0xbc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01e      	beq.n	800425e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <vPortFree+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004238:	f7ff fa38 	bl	80036ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <vPortFree+0xc0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4413      	add	r3, r2
 8004246:	4a09      	ldr	r2, [pc, #36]	@ (800426c <vPortFree+0xc0>)
 8004248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800424a:	6938      	ldr	r0, [r7, #16]
 800424c:	f000 f874 	bl	8004338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <vPortFree+0xc4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a06      	ldr	r2, [pc, #24]	@ (8004270 <vPortFree+0xc4>)
 8004258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800425a:	f7ff fa35 	bl	80036c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	2000137c 	.word	0x2000137c
 800426c:	2000136c 	.word	0x2000136c
 8004270:	20001378 	.word	0x20001378

08004274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800427a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800427e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004280:	4b27      	ldr	r3, [pc, #156]	@ (8004320 <prvHeapInit+0xac>)
 8004282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3307      	adds	r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <prvHeapInit+0xac>)
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <prvHeapInit+0xb0>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004324 <prvHeapInit+0xb0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042c0:	2208      	movs	r2, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a15      	ldr	r2, [pc, #84]	@ (8004328 <prvHeapInit+0xb4>)
 80042d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <prvHeapInit+0xb4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <prvHeapInit+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <prvHeapInit+0xb4>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <prvHeapInit+0xb8>)
 8004302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <prvHeapInit+0xbc>)
 800430a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <prvHeapInit+0xc0>)
 800430e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004312:	601a      	str	r2, [r3, #0]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000550 	.word	0x20000550
 8004324:	20001360 	.word	0x20001360
 8004328:	20001368 	.word	0x20001368
 800432c:	20001370 	.word	0x20001370
 8004330:	2000136c 	.word	0x2000136c
 8004334:	2000137c 	.word	0x2000137c

08004338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <prvInsertBlockIntoFreeList+0xa8>)
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e002      	b.n	800434c <prvInsertBlockIntoFreeList+0x14>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d8f7      	bhi.n	8004346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	d108      	bne.n	800437a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	441a      	add	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d118      	bne.n	80043c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b14      	ldr	r3, [pc, #80]	@ (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d00d      	beq.n	80043b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	e008      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <prvInsertBlockIntoFreeList+0xac>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e003      	b.n	80043c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d002      	beq.n	80043d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	20001360 	.word	0x20001360
 80043e4:	20001368 	.word	0x20001368

080043e8 <siprintf>:
 80043e8:	b40e      	push	{r1, r2, r3}
 80043ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043ee:	b500      	push	{lr}
 80043f0:	b09c      	sub	sp, #112	@ 0x70
 80043f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80043f4:	9002      	str	r0, [sp, #8]
 80043f6:	9006      	str	r0, [sp, #24]
 80043f8:	9107      	str	r1, [sp, #28]
 80043fa:	9104      	str	r1, [sp, #16]
 80043fc:	4808      	ldr	r0, [pc, #32]	@ (8004420 <siprintf+0x38>)
 80043fe:	4909      	ldr	r1, [pc, #36]	@ (8004424 <siprintf+0x3c>)
 8004400:	f853 2b04 	ldr.w	r2, [r3], #4
 8004404:	9105      	str	r1, [sp, #20]
 8004406:	6800      	ldr	r0, [r0, #0]
 8004408:	a902      	add	r1, sp, #8
 800440a:	9301      	str	r3, [sp, #4]
 800440c:	f000 f9a0 	bl	8004750 <_svfiprintf_r>
 8004410:	2200      	movs	r2, #0
 8004412:	9b02      	ldr	r3, [sp, #8]
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	b01c      	add	sp, #112	@ 0x70
 8004418:	f85d eb04 	ldr.w	lr, [sp], #4
 800441c:	b003      	add	sp, #12
 800441e:	4770      	bx	lr
 8004420:	20000010 	.word	0x20000010
 8004424:	ffff0208 	.word	0xffff0208

08004428 <memset>:
 8004428:	4603      	mov	r3, r0
 800442a:	4402      	add	r2, r0
 800442c:	4293      	cmp	r3, r2
 800442e:	d100      	bne.n	8004432 <memset+0xa>
 8004430:	4770      	bx	lr
 8004432:	f803 1b01 	strb.w	r1, [r3], #1
 8004436:	e7f9      	b.n	800442c <memset+0x4>

08004438 <__errno>:
 8004438:	4b01      	ldr	r3, [pc, #4]	@ (8004440 <__errno+0x8>)
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000010 	.word	0x20000010

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	2600      	movs	r6, #0
 8004448:	4d0c      	ldr	r5, [pc, #48]	@ (800447c <__libc_init_array+0x38>)
 800444a:	4c0d      	ldr	r4, [pc, #52]	@ (8004480 <__libc_init_array+0x3c>)
 800444c:	1b64      	subs	r4, r4, r5
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	42a6      	cmp	r6, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	f000 fc78 	bl	8004d48 <_init>
 8004458:	2600      	movs	r6, #0
 800445a:	4d0a      	ldr	r5, [pc, #40]	@ (8004484 <__libc_init_array+0x40>)
 800445c:	4c0a      	ldr	r4, [pc, #40]	@ (8004488 <__libc_init_array+0x44>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	42a6      	cmp	r6, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f855 3b04 	ldr.w	r3, [r5], #4
 800446c:	4798      	blx	r3
 800446e:	3601      	adds	r6, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f855 3b04 	ldr.w	r3, [r5], #4
 8004476:	4798      	blx	r3
 8004478:	3601      	adds	r6, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	08004ee0 	.word	0x08004ee0
 8004480:	08004ee0 	.word	0x08004ee0
 8004484:	08004ee0 	.word	0x08004ee0
 8004488:	08004ee4 	.word	0x08004ee4

0800448c <__retarget_lock_acquire_recursive>:
 800448c:	4770      	bx	lr

0800448e <__retarget_lock_release_recursive>:
 800448e:	4770      	bx	lr

08004490 <memcpy>:
 8004490:	440a      	add	r2, r1
 8004492:	4291      	cmp	r1, r2
 8004494:	f100 33ff 	add.w	r3, r0, #4294967295
 8004498:	d100      	bne.n	800449c <memcpy+0xc>
 800449a:	4770      	bx	lr
 800449c:	b510      	push	{r4, lr}
 800449e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044a2:	4291      	cmp	r1, r2
 80044a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044a8:	d1f9      	bne.n	800449e <memcpy+0xe>
 80044aa:	bd10      	pop	{r4, pc}

080044ac <_free_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4605      	mov	r5, r0
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d040      	beq.n	8004536 <_free_r+0x8a>
 80044b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b8:	1f0c      	subs	r4, r1, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfb8      	it	lt
 80044be:	18e4      	addlt	r4, r4, r3
 80044c0:	f000 f8de 	bl	8004680 <__malloc_lock>
 80044c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004538 <_free_r+0x8c>)
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	b933      	cbnz	r3, 80044d8 <_free_r+0x2c>
 80044ca:	6063      	str	r3, [r4, #4]
 80044cc:	6014      	str	r4, [r2, #0]
 80044ce:	4628      	mov	r0, r5
 80044d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d4:	f000 b8da 	b.w	800468c <__malloc_unlock>
 80044d8:	42a3      	cmp	r3, r4
 80044da:	d908      	bls.n	80044ee <_free_r+0x42>
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	1821      	adds	r1, r4, r0
 80044e0:	428b      	cmp	r3, r1
 80044e2:	bf01      	itttt	eq
 80044e4:	6819      	ldreq	r1, [r3, #0]
 80044e6:	685b      	ldreq	r3, [r3, #4]
 80044e8:	1809      	addeq	r1, r1, r0
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	e7ed      	b.n	80044ca <_free_r+0x1e>
 80044ee:	461a      	mov	r2, r3
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	b10b      	cbz	r3, 80044f8 <_free_r+0x4c>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d9fa      	bls.n	80044ee <_free_r+0x42>
 80044f8:	6811      	ldr	r1, [r2, #0]
 80044fa:	1850      	adds	r0, r2, r1
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d10b      	bne.n	8004518 <_free_r+0x6c>
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	4401      	add	r1, r0
 8004504:	1850      	adds	r0, r2, r1
 8004506:	4283      	cmp	r3, r0
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	d1e0      	bne.n	80044ce <_free_r+0x22>
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4408      	add	r0, r1
 8004512:	6010      	str	r0, [r2, #0]
 8004514:	6053      	str	r3, [r2, #4]
 8004516:	e7da      	b.n	80044ce <_free_r+0x22>
 8004518:	d902      	bls.n	8004520 <_free_r+0x74>
 800451a:	230c      	movs	r3, #12
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	e7d6      	b.n	80044ce <_free_r+0x22>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	1821      	adds	r1, r4, r0
 8004524:	428b      	cmp	r3, r1
 8004526:	bf01      	itttt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	1809      	addeq	r1, r1, r0
 800452e:	6021      	streq	r1, [r4, #0]
 8004530:	6063      	str	r3, [r4, #4]
 8004532:	6054      	str	r4, [r2, #4]
 8004534:	e7cb      	b.n	80044ce <_free_r+0x22>
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200014c4 	.word	0x200014c4

0800453c <sbrk_aligned>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4e0f      	ldr	r6, [pc, #60]	@ (800457c <sbrk_aligned+0x40>)
 8004540:	460c      	mov	r4, r1
 8004542:	6831      	ldr	r1, [r6, #0]
 8004544:	4605      	mov	r5, r0
 8004546:	b911      	cbnz	r1, 800454e <sbrk_aligned+0x12>
 8004548:	f000 fbaa 	bl	8004ca0 <_sbrk_r>
 800454c:	6030      	str	r0, [r6, #0]
 800454e:	4621      	mov	r1, r4
 8004550:	4628      	mov	r0, r5
 8004552:	f000 fba5 	bl	8004ca0 <_sbrk_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d103      	bne.n	8004562 <sbrk_aligned+0x26>
 800455a:	f04f 34ff 	mov.w	r4, #4294967295
 800455e:	4620      	mov	r0, r4
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	1cc4      	adds	r4, r0, #3
 8004564:	f024 0403 	bic.w	r4, r4, #3
 8004568:	42a0      	cmp	r0, r4
 800456a:	d0f8      	beq.n	800455e <sbrk_aligned+0x22>
 800456c:	1a21      	subs	r1, r4, r0
 800456e:	4628      	mov	r0, r5
 8004570:	f000 fb96 	bl	8004ca0 <_sbrk_r>
 8004574:	3001      	adds	r0, #1
 8004576:	d1f2      	bne.n	800455e <sbrk_aligned+0x22>
 8004578:	e7ef      	b.n	800455a <sbrk_aligned+0x1e>
 800457a:	bf00      	nop
 800457c:	200014c0 	.word	0x200014c0

08004580 <_malloc_r>:
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	1ccd      	adds	r5, r1, #3
 8004586:	f025 0503 	bic.w	r5, r5, #3
 800458a:	3508      	adds	r5, #8
 800458c:	2d0c      	cmp	r5, #12
 800458e:	bf38      	it	cc
 8004590:	250c      	movcc	r5, #12
 8004592:	2d00      	cmp	r5, #0
 8004594:	4606      	mov	r6, r0
 8004596:	db01      	blt.n	800459c <_malloc_r+0x1c>
 8004598:	42a9      	cmp	r1, r5
 800459a:	d904      	bls.n	80045a6 <_malloc_r+0x26>
 800459c:	230c      	movs	r3, #12
 800459e:	6033      	str	r3, [r6, #0]
 80045a0:	2000      	movs	r0, #0
 80045a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800467c <_malloc_r+0xfc>
 80045aa:	f000 f869 	bl	8004680 <__malloc_lock>
 80045ae:	f8d8 3000 	ldr.w	r3, [r8]
 80045b2:	461c      	mov	r4, r3
 80045b4:	bb44      	cbnz	r4, 8004608 <_malloc_r+0x88>
 80045b6:	4629      	mov	r1, r5
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff ffbf 	bl	800453c <sbrk_aligned>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	4604      	mov	r4, r0
 80045c2:	d158      	bne.n	8004676 <_malloc_r+0xf6>
 80045c4:	f8d8 4000 	ldr.w	r4, [r8]
 80045c8:	4627      	mov	r7, r4
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d143      	bne.n	8004656 <_malloc_r+0xd6>
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d04b      	beq.n	800466a <_malloc_r+0xea>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	4639      	mov	r1, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	eb04 0903 	add.w	r9, r4, r3
 80045dc:	f000 fb60 	bl	8004ca0 <_sbrk_r>
 80045e0:	4581      	cmp	r9, r0
 80045e2:	d142      	bne.n	800466a <_malloc_r+0xea>
 80045e4:	6821      	ldr	r1, [r4, #0]
 80045e6:	4630      	mov	r0, r6
 80045e8:	1a6d      	subs	r5, r5, r1
 80045ea:	4629      	mov	r1, r5
 80045ec:	f7ff ffa6 	bl	800453c <sbrk_aligned>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d03a      	beq.n	800466a <_malloc_r+0xea>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	442b      	add	r3, r5
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	f8d8 3000 	ldr.w	r3, [r8]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	bb62      	cbnz	r2, 800465c <_malloc_r+0xdc>
 8004602:	f8c8 7000 	str.w	r7, [r8]
 8004606:	e00f      	b.n	8004628 <_malloc_r+0xa8>
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	1b52      	subs	r2, r2, r5
 800460c:	d420      	bmi.n	8004650 <_malloc_r+0xd0>
 800460e:	2a0b      	cmp	r2, #11
 8004610:	d917      	bls.n	8004642 <_malloc_r+0xc2>
 8004612:	1961      	adds	r1, r4, r5
 8004614:	42a3      	cmp	r3, r4
 8004616:	6025      	str	r5, [r4, #0]
 8004618:	bf18      	it	ne
 800461a:	6059      	strne	r1, [r3, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	bf08      	it	eq
 8004620:	f8c8 1000 	streq.w	r1, [r8]
 8004624:	5162      	str	r2, [r4, r5]
 8004626:	604b      	str	r3, [r1, #4]
 8004628:	4630      	mov	r0, r6
 800462a:	f000 f82f 	bl	800468c <__malloc_unlock>
 800462e:	f104 000b 	add.w	r0, r4, #11
 8004632:	1d23      	adds	r3, r4, #4
 8004634:	f020 0007 	bic.w	r0, r0, #7
 8004638:	1ac2      	subs	r2, r0, r3
 800463a:	bf1c      	itt	ne
 800463c:	1a1b      	subne	r3, r3, r0
 800463e:	50a3      	strne	r3, [r4, r2]
 8004640:	e7af      	b.n	80045a2 <_malloc_r+0x22>
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	42a3      	cmp	r3, r4
 8004646:	bf0c      	ite	eq
 8004648:	f8c8 2000 	streq.w	r2, [r8]
 800464c:	605a      	strne	r2, [r3, #4]
 800464e:	e7eb      	b.n	8004628 <_malloc_r+0xa8>
 8004650:	4623      	mov	r3, r4
 8004652:	6864      	ldr	r4, [r4, #4]
 8004654:	e7ae      	b.n	80045b4 <_malloc_r+0x34>
 8004656:	463c      	mov	r4, r7
 8004658:	687f      	ldr	r7, [r7, #4]
 800465a:	e7b6      	b.n	80045ca <_malloc_r+0x4a>
 800465c:	461a      	mov	r2, r3
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	42a3      	cmp	r3, r4
 8004662:	d1fb      	bne.n	800465c <_malloc_r+0xdc>
 8004664:	2300      	movs	r3, #0
 8004666:	6053      	str	r3, [r2, #4]
 8004668:	e7de      	b.n	8004628 <_malloc_r+0xa8>
 800466a:	230c      	movs	r3, #12
 800466c:	4630      	mov	r0, r6
 800466e:	6033      	str	r3, [r6, #0]
 8004670:	f000 f80c 	bl	800468c <__malloc_unlock>
 8004674:	e794      	b.n	80045a0 <_malloc_r+0x20>
 8004676:	6005      	str	r5, [r0, #0]
 8004678:	e7d6      	b.n	8004628 <_malloc_r+0xa8>
 800467a:	bf00      	nop
 800467c:	200014c4 	.word	0x200014c4

08004680 <__malloc_lock>:
 8004680:	4801      	ldr	r0, [pc, #4]	@ (8004688 <__malloc_lock+0x8>)
 8004682:	f7ff bf03 	b.w	800448c <__retarget_lock_acquire_recursive>
 8004686:	bf00      	nop
 8004688:	200014bc 	.word	0x200014bc

0800468c <__malloc_unlock>:
 800468c:	4801      	ldr	r0, [pc, #4]	@ (8004694 <__malloc_unlock+0x8>)
 800468e:	f7ff befe 	b.w	800448e <__retarget_lock_release_recursive>
 8004692:	bf00      	nop
 8004694:	200014bc 	.word	0x200014bc

08004698 <__ssputs_r>:
 8004698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469c:	461f      	mov	r7, r3
 800469e:	688e      	ldr	r6, [r1, #8]
 80046a0:	4682      	mov	sl, r0
 80046a2:	42be      	cmp	r6, r7
 80046a4:	460c      	mov	r4, r1
 80046a6:	4690      	mov	r8, r2
 80046a8:	680b      	ldr	r3, [r1, #0]
 80046aa:	d82d      	bhi.n	8004708 <__ssputs_r+0x70>
 80046ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046b4:	d026      	beq.n	8004704 <__ssputs_r+0x6c>
 80046b6:	6965      	ldr	r5, [r4, #20]
 80046b8:	6909      	ldr	r1, [r1, #16]
 80046ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046be:	eba3 0901 	sub.w	r9, r3, r1
 80046c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046c6:	1c7b      	adds	r3, r7, #1
 80046c8:	444b      	add	r3, r9
 80046ca:	106d      	asrs	r5, r5, #1
 80046cc:	429d      	cmp	r5, r3
 80046ce:	bf38      	it	cc
 80046d0:	461d      	movcc	r5, r3
 80046d2:	0553      	lsls	r3, r2, #21
 80046d4:	d527      	bpl.n	8004726 <__ssputs_r+0x8e>
 80046d6:	4629      	mov	r1, r5
 80046d8:	f7ff ff52 	bl	8004580 <_malloc_r>
 80046dc:	4606      	mov	r6, r0
 80046de:	b360      	cbz	r0, 800473a <__ssputs_r+0xa2>
 80046e0:	464a      	mov	r2, r9
 80046e2:	6921      	ldr	r1, [r4, #16]
 80046e4:	f7ff fed4 	bl	8004490 <memcpy>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80046ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	6126      	str	r6, [r4, #16]
 80046f6:	444e      	add	r6, r9
 80046f8:	6026      	str	r6, [r4, #0]
 80046fa:	463e      	mov	r6, r7
 80046fc:	6165      	str	r5, [r4, #20]
 80046fe:	eba5 0509 	sub.w	r5, r5, r9
 8004702:	60a5      	str	r5, [r4, #8]
 8004704:	42be      	cmp	r6, r7
 8004706:	d900      	bls.n	800470a <__ssputs_r+0x72>
 8004708:	463e      	mov	r6, r7
 800470a:	4632      	mov	r2, r6
 800470c:	4641      	mov	r1, r8
 800470e:	6820      	ldr	r0, [r4, #0]
 8004710:	f000 faac 	bl	8004c6c <memmove>
 8004714:	2000      	movs	r0, #0
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	1b9b      	subs	r3, r3, r6
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	4433      	add	r3, r6
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004726:	462a      	mov	r2, r5
 8004728:	f000 fad8 	bl	8004cdc <_realloc_r>
 800472c:	4606      	mov	r6, r0
 800472e:	2800      	cmp	r0, #0
 8004730:	d1e0      	bne.n	80046f4 <__ssputs_r+0x5c>
 8004732:	4650      	mov	r0, sl
 8004734:	6921      	ldr	r1, [r4, #16]
 8004736:	f7ff feb9 	bl	80044ac <_free_r>
 800473a:	230c      	movs	r3, #12
 800473c:	f8ca 3000 	str.w	r3, [sl]
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	f04f 30ff 	mov.w	r0, #4294967295
 8004746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	e7e9      	b.n	8004722 <__ssputs_r+0x8a>
	...

08004750 <_svfiprintf_r>:
 8004750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004754:	4698      	mov	r8, r3
 8004756:	898b      	ldrh	r3, [r1, #12]
 8004758:	4607      	mov	r7, r0
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	460d      	mov	r5, r1
 800475e:	4614      	mov	r4, r2
 8004760:	b09d      	sub	sp, #116	@ 0x74
 8004762:	d510      	bpl.n	8004786 <_svfiprintf_r+0x36>
 8004764:	690b      	ldr	r3, [r1, #16]
 8004766:	b973      	cbnz	r3, 8004786 <_svfiprintf_r+0x36>
 8004768:	2140      	movs	r1, #64	@ 0x40
 800476a:	f7ff ff09 	bl	8004580 <_malloc_r>
 800476e:	6028      	str	r0, [r5, #0]
 8004770:	6128      	str	r0, [r5, #16]
 8004772:	b930      	cbnz	r0, 8004782 <_svfiprintf_r+0x32>
 8004774:	230c      	movs	r3, #12
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	b01d      	add	sp, #116	@ 0x74
 800477e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004782:	2340      	movs	r3, #64	@ 0x40
 8004784:	616b      	str	r3, [r5, #20]
 8004786:	2300      	movs	r3, #0
 8004788:	9309      	str	r3, [sp, #36]	@ 0x24
 800478a:	2320      	movs	r3, #32
 800478c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004790:	2330      	movs	r3, #48	@ 0x30
 8004792:	f04f 0901 	mov.w	r9, #1
 8004796:	f8cd 800c 	str.w	r8, [sp, #12]
 800479a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004934 <_svfiprintf_r+0x1e4>
 800479e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047a2:	4623      	mov	r3, r4
 80047a4:	469a      	mov	sl, r3
 80047a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047aa:	b10a      	cbz	r2, 80047b0 <_svfiprintf_r+0x60>
 80047ac:	2a25      	cmp	r2, #37	@ 0x25
 80047ae:	d1f9      	bne.n	80047a4 <_svfiprintf_r+0x54>
 80047b0:	ebba 0b04 	subs.w	fp, sl, r4
 80047b4:	d00b      	beq.n	80047ce <_svfiprintf_r+0x7e>
 80047b6:	465b      	mov	r3, fp
 80047b8:	4622      	mov	r2, r4
 80047ba:	4629      	mov	r1, r5
 80047bc:	4638      	mov	r0, r7
 80047be:	f7ff ff6b 	bl	8004698 <__ssputs_r>
 80047c2:	3001      	adds	r0, #1
 80047c4:	f000 80a7 	beq.w	8004916 <_svfiprintf_r+0x1c6>
 80047c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ca:	445a      	add	r2, fp
 80047cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80047ce:	f89a 3000 	ldrb.w	r3, [sl]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 809f 	beq.w	8004916 <_svfiprintf_r+0x1c6>
 80047d8:	2300      	movs	r3, #0
 80047da:	f04f 32ff 	mov.w	r2, #4294967295
 80047de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e2:	f10a 0a01 	add.w	sl, sl, #1
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	9307      	str	r3, [sp, #28]
 80047ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80047f0:	4654      	mov	r4, sl
 80047f2:	2205      	movs	r2, #5
 80047f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f8:	484e      	ldr	r0, [pc, #312]	@ (8004934 <_svfiprintf_r+0x1e4>)
 80047fa:	f000 fa61 	bl	8004cc0 <memchr>
 80047fe:	9a04      	ldr	r2, [sp, #16]
 8004800:	b9d8      	cbnz	r0, 800483a <_svfiprintf_r+0xea>
 8004802:	06d0      	lsls	r0, r2, #27
 8004804:	bf44      	itt	mi
 8004806:	2320      	movmi	r3, #32
 8004808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800480c:	0711      	lsls	r1, r2, #28
 800480e:	bf44      	itt	mi
 8004810:	232b      	movmi	r3, #43	@ 0x2b
 8004812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004816:	f89a 3000 	ldrb.w	r3, [sl]
 800481a:	2b2a      	cmp	r3, #42	@ 0x2a
 800481c:	d015      	beq.n	800484a <_svfiprintf_r+0xfa>
 800481e:	4654      	mov	r4, sl
 8004820:	2000      	movs	r0, #0
 8004822:	f04f 0c0a 	mov.w	ip, #10
 8004826:	9a07      	ldr	r2, [sp, #28]
 8004828:	4621      	mov	r1, r4
 800482a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800482e:	3b30      	subs	r3, #48	@ 0x30
 8004830:	2b09      	cmp	r3, #9
 8004832:	d94b      	bls.n	80048cc <_svfiprintf_r+0x17c>
 8004834:	b1b0      	cbz	r0, 8004864 <_svfiprintf_r+0x114>
 8004836:	9207      	str	r2, [sp, #28]
 8004838:	e014      	b.n	8004864 <_svfiprintf_r+0x114>
 800483a:	eba0 0308 	sub.w	r3, r0, r8
 800483e:	fa09 f303 	lsl.w	r3, r9, r3
 8004842:	4313      	orrs	r3, r2
 8004844:	46a2      	mov	sl, r4
 8004846:	9304      	str	r3, [sp, #16]
 8004848:	e7d2      	b.n	80047f0 <_svfiprintf_r+0xa0>
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	1d19      	adds	r1, r3, #4
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	9103      	str	r1, [sp, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	bfbb      	ittet	lt
 8004856:	425b      	neglt	r3, r3
 8004858:	f042 0202 	orrlt.w	r2, r2, #2
 800485c:	9307      	strge	r3, [sp, #28]
 800485e:	9307      	strlt	r3, [sp, #28]
 8004860:	bfb8      	it	lt
 8004862:	9204      	strlt	r2, [sp, #16]
 8004864:	7823      	ldrb	r3, [r4, #0]
 8004866:	2b2e      	cmp	r3, #46	@ 0x2e
 8004868:	d10a      	bne.n	8004880 <_svfiprintf_r+0x130>
 800486a:	7863      	ldrb	r3, [r4, #1]
 800486c:	2b2a      	cmp	r3, #42	@ 0x2a
 800486e:	d132      	bne.n	80048d6 <_svfiprintf_r+0x186>
 8004870:	9b03      	ldr	r3, [sp, #12]
 8004872:	3402      	adds	r4, #2
 8004874:	1d1a      	adds	r2, r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	9203      	str	r2, [sp, #12]
 800487a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004938 <_svfiprintf_r+0x1e8>
 8004884:	2203      	movs	r2, #3
 8004886:	4650      	mov	r0, sl
 8004888:	7821      	ldrb	r1, [r4, #0]
 800488a:	f000 fa19 	bl	8004cc0 <memchr>
 800488e:	b138      	cbz	r0, 80048a0 <_svfiprintf_r+0x150>
 8004890:	2240      	movs	r2, #64	@ 0x40
 8004892:	9b04      	ldr	r3, [sp, #16]
 8004894:	eba0 000a 	sub.w	r0, r0, sl
 8004898:	4082      	lsls	r2, r0
 800489a:	4313      	orrs	r3, r2
 800489c:	3401      	adds	r4, #1
 800489e:	9304      	str	r3, [sp, #16]
 80048a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a4:	2206      	movs	r2, #6
 80048a6:	4825      	ldr	r0, [pc, #148]	@ (800493c <_svfiprintf_r+0x1ec>)
 80048a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ac:	f000 fa08 	bl	8004cc0 <memchr>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d036      	beq.n	8004922 <_svfiprintf_r+0x1d2>
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <_svfiprintf_r+0x1f0>)
 80048b6:	bb1b      	cbnz	r3, 8004900 <_svfiprintf_r+0x1b0>
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	3307      	adds	r3, #7
 80048bc:	f023 0307 	bic.w	r3, r3, #7
 80048c0:	3308      	adds	r3, #8
 80048c2:	9303      	str	r3, [sp, #12]
 80048c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c6:	4433      	add	r3, r6
 80048c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ca:	e76a      	b.n	80047a2 <_svfiprintf_r+0x52>
 80048cc:	460c      	mov	r4, r1
 80048ce:	2001      	movs	r0, #1
 80048d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d4:	e7a8      	b.n	8004828 <_svfiprintf_r+0xd8>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f04f 0c0a 	mov.w	ip, #10
 80048dc:	4619      	mov	r1, r3
 80048de:	3401      	adds	r4, #1
 80048e0:	9305      	str	r3, [sp, #20]
 80048e2:	4620      	mov	r0, r4
 80048e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048e8:	3a30      	subs	r2, #48	@ 0x30
 80048ea:	2a09      	cmp	r2, #9
 80048ec:	d903      	bls.n	80048f6 <_svfiprintf_r+0x1a6>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0c6      	beq.n	8004880 <_svfiprintf_r+0x130>
 80048f2:	9105      	str	r1, [sp, #20]
 80048f4:	e7c4      	b.n	8004880 <_svfiprintf_r+0x130>
 80048f6:	4604      	mov	r4, r0
 80048f8:	2301      	movs	r3, #1
 80048fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80048fe:	e7f0      	b.n	80048e2 <_svfiprintf_r+0x192>
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	462a      	mov	r2, r5
 8004906:	4638      	mov	r0, r7
 8004908:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <_svfiprintf_r+0x1f4>)
 800490a:	a904      	add	r1, sp, #16
 800490c:	f3af 8000 	nop.w
 8004910:	1c42      	adds	r2, r0, #1
 8004912:	4606      	mov	r6, r0
 8004914:	d1d6      	bne.n	80048c4 <_svfiprintf_r+0x174>
 8004916:	89ab      	ldrh	r3, [r5, #12]
 8004918:	065b      	lsls	r3, r3, #25
 800491a:	f53f af2d 	bmi.w	8004778 <_svfiprintf_r+0x28>
 800491e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004920:	e72c      	b.n	800477c <_svfiprintf_r+0x2c>
 8004922:	ab03      	add	r3, sp, #12
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	462a      	mov	r2, r5
 8004928:	4638      	mov	r0, r7
 800492a:	4b06      	ldr	r3, [pc, #24]	@ (8004944 <_svfiprintf_r+0x1f4>)
 800492c:	a904      	add	r1, sp, #16
 800492e:	f000 f87d 	bl	8004a2c <_printf_i>
 8004932:	e7ed      	b.n	8004910 <_svfiprintf_r+0x1c0>
 8004934:	08004ea2 	.word	0x08004ea2
 8004938:	08004ea8 	.word	0x08004ea8
 800493c:	08004eac 	.word	0x08004eac
 8004940:	00000000 	.word	0x00000000
 8004944:	08004699 	.word	0x08004699

08004948 <_printf_common>:
 8004948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	4616      	mov	r6, r2
 800494e:	4698      	mov	r8, r3
 8004950:	688a      	ldr	r2, [r1, #8]
 8004952:	690b      	ldr	r3, [r1, #16]
 8004954:	4607      	mov	r7, r0
 8004956:	4293      	cmp	r3, r2
 8004958:	bfb8      	it	lt
 800495a:	4613      	movlt	r3, r2
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004962:	460c      	mov	r4, r1
 8004964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004968:	b10a      	cbz	r2, 800496e <_printf_common+0x26>
 800496a:	3301      	adds	r3, #1
 800496c:	6033      	str	r3, [r6, #0]
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	0699      	lsls	r1, r3, #26
 8004972:	bf42      	ittt	mi
 8004974:	6833      	ldrmi	r3, [r6, #0]
 8004976:	3302      	addmi	r3, #2
 8004978:	6033      	strmi	r3, [r6, #0]
 800497a:	6825      	ldr	r5, [r4, #0]
 800497c:	f015 0506 	ands.w	r5, r5, #6
 8004980:	d106      	bne.n	8004990 <_printf_common+0x48>
 8004982:	f104 0a19 	add.w	sl, r4, #25
 8004986:	68e3      	ldr	r3, [r4, #12]
 8004988:	6832      	ldr	r2, [r6, #0]
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	42ab      	cmp	r3, r5
 800498e:	dc2b      	bgt.n	80049e8 <_printf_common+0xa0>
 8004990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004994:	6822      	ldr	r2, [r4, #0]
 8004996:	3b00      	subs	r3, #0
 8004998:	bf18      	it	ne
 800499a:	2301      	movne	r3, #1
 800499c:	0692      	lsls	r2, r2, #26
 800499e:	d430      	bmi.n	8004a02 <_printf_common+0xba>
 80049a0:	4641      	mov	r1, r8
 80049a2:	4638      	mov	r0, r7
 80049a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049a8:	47c8      	blx	r9
 80049aa:	3001      	adds	r0, #1
 80049ac:	d023      	beq.n	80049f6 <_printf_common+0xae>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	6922      	ldr	r2, [r4, #16]
 80049b2:	f003 0306 	and.w	r3, r3, #6
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	bf14      	ite	ne
 80049ba:	2500      	movne	r5, #0
 80049bc:	6833      	ldreq	r3, [r6, #0]
 80049be:	f04f 0600 	mov.w	r6, #0
 80049c2:	bf08      	it	eq
 80049c4:	68e5      	ldreq	r5, [r4, #12]
 80049c6:	f104 041a 	add.w	r4, r4, #26
 80049ca:	bf08      	it	eq
 80049cc:	1aed      	subeq	r5, r5, r3
 80049ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80049d2:	bf08      	it	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	4293      	cmp	r3, r2
 80049da:	bfc4      	itt	gt
 80049dc:	1a9b      	subgt	r3, r3, r2
 80049de:	18ed      	addgt	r5, r5, r3
 80049e0:	42b5      	cmp	r5, r6
 80049e2:	d11a      	bne.n	8004a1a <_printf_common+0xd2>
 80049e4:	2000      	movs	r0, #0
 80049e6:	e008      	b.n	80049fa <_printf_common+0xb2>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4652      	mov	r2, sl
 80049ec:	4641      	mov	r1, r8
 80049ee:	4638      	mov	r0, r7
 80049f0:	47c8      	blx	r9
 80049f2:	3001      	adds	r0, #1
 80049f4:	d103      	bne.n	80049fe <_printf_common+0xb6>
 80049f6:	f04f 30ff 	mov.w	r0, #4294967295
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fe:	3501      	adds	r5, #1
 8004a00:	e7c1      	b.n	8004986 <_printf_common+0x3e>
 8004a02:	2030      	movs	r0, #48	@ 0x30
 8004a04:	18e1      	adds	r1, r4, r3
 8004a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a10:	4422      	add	r2, r4
 8004a12:	3302      	adds	r3, #2
 8004a14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a18:	e7c2      	b.n	80049a0 <_printf_common+0x58>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4622      	mov	r2, r4
 8004a1e:	4641      	mov	r1, r8
 8004a20:	4638      	mov	r0, r7
 8004a22:	47c8      	blx	r9
 8004a24:	3001      	adds	r0, #1
 8004a26:	d0e6      	beq.n	80049f6 <_printf_common+0xae>
 8004a28:	3601      	adds	r6, #1
 8004a2a:	e7d9      	b.n	80049e0 <_printf_common+0x98>

08004a2c <_printf_i>:
 8004a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	7e0f      	ldrb	r7, [r1, #24]
 8004a32:	4691      	mov	r9, r2
 8004a34:	2f78      	cmp	r7, #120	@ 0x78
 8004a36:	4680      	mov	r8, r0
 8004a38:	460c      	mov	r4, r1
 8004a3a:	469a      	mov	sl, r3
 8004a3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a42:	d807      	bhi.n	8004a54 <_printf_i+0x28>
 8004a44:	2f62      	cmp	r7, #98	@ 0x62
 8004a46:	d80a      	bhi.n	8004a5e <_printf_i+0x32>
 8004a48:	2f00      	cmp	r7, #0
 8004a4a:	f000 80d3 	beq.w	8004bf4 <_printf_i+0x1c8>
 8004a4e:	2f58      	cmp	r7, #88	@ 0x58
 8004a50:	f000 80ba 	beq.w	8004bc8 <_printf_i+0x19c>
 8004a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a5c:	e03a      	b.n	8004ad4 <_printf_i+0xa8>
 8004a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a62:	2b15      	cmp	r3, #21
 8004a64:	d8f6      	bhi.n	8004a54 <_printf_i+0x28>
 8004a66:	a101      	add	r1, pc, #4	@ (adr r1, 8004a6c <_printf_i+0x40>)
 8004a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a6c:	08004ac5 	.word	0x08004ac5
 8004a70:	08004ad9 	.word	0x08004ad9
 8004a74:	08004a55 	.word	0x08004a55
 8004a78:	08004a55 	.word	0x08004a55
 8004a7c:	08004a55 	.word	0x08004a55
 8004a80:	08004a55 	.word	0x08004a55
 8004a84:	08004ad9 	.word	0x08004ad9
 8004a88:	08004a55 	.word	0x08004a55
 8004a8c:	08004a55 	.word	0x08004a55
 8004a90:	08004a55 	.word	0x08004a55
 8004a94:	08004a55 	.word	0x08004a55
 8004a98:	08004bdb 	.word	0x08004bdb
 8004a9c:	08004b03 	.word	0x08004b03
 8004aa0:	08004b95 	.word	0x08004b95
 8004aa4:	08004a55 	.word	0x08004a55
 8004aa8:	08004a55 	.word	0x08004a55
 8004aac:	08004bfd 	.word	0x08004bfd
 8004ab0:	08004a55 	.word	0x08004a55
 8004ab4:	08004b03 	.word	0x08004b03
 8004ab8:	08004a55 	.word	0x08004a55
 8004abc:	08004a55 	.word	0x08004a55
 8004ac0:	08004b9d 	.word	0x08004b9d
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	1d1a      	adds	r2, r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6032      	str	r2, [r6, #0]
 8004acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e09e      	b.n	8004c16 <_printf_i+0x1ea>
 8004ad8:	6833      	ldr	r3, [r6, #0]
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	1d19      	adds	r1, r3, #4
 8004ade:	6031      	str	r1, [r6, #0]
 8004ae0:	0606      	lsls	r6, r0, #24
 8004ae2:	d501      	bpl.n	8004ae8 <_printf_i+0xbc>
 8004ae4:	681d      	ldr	r5, [r3, #0]
 8004ae6:	e003      	b.n	8004af0 <_printf_i+0xc4>
 8004ae8:	0645      	lsls	r5, r0, #25
 8004aea:	d5fb      	bpl.n	8004ae4 <_printf_i+0xb8>
 8004aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004af0:	2d00      	cmp	r5, #0
 8004af2:	da03      	bge.n	8004afc <_printf_i+0xd0>
 8004af4:	232d      	movs	r3, #45	@ 0x2d
 8004af6:	426d      	negs	r5, r5
 8004af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004afc:	230a      	movs	r3, #10
 8004afe:	4859      	ldr	r0, [pc, #356]	@ (8004c64 <_printf_i+0x238>)
 8004b00:	e011      	b.n	8004b26 <_printf_i+0xfa>
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	0608      	lsls	r0, r1, #24
 8004b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b0c:	d402      	bmi.n	8004b14 <_printf_i+0xe8>
 8004b0e:	0649      	lsls	r1, r1, #25
 8004b10:	bf48      	it	mi
 8004b12:	b2ad      	uxthmi	r5, r5
 8004b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b16:	6033      	str	r3, [r6, #0]
 8004b18:	bf14      	ite	ne
 8004b1a:	230a      	movne	r3, #10
 8004b1c:	2308      	moveq	r3, #8
 8004b1e:	4851      	ldr	r0, [pc, #324]	@ (8004c64 <_printf_i+0x238>)
 8004b20:	2100      	movs	r1, #0
 8004b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b26:	6866      	ldr	r6, [r4, #4]
 8004b28:	2e00      	cmp	r6, #0
 8004b2a:	bfa8      	it	ge
 8004b2c:	6821      	ldrge	r1, [r4, #0]
 8004b2e:	60a6      	str	r6, [r4, #8]
 8004b30:	bfa4      	itt	ge
 8004b32:	f021 0104 	bicge.w	r1, r1, #4
 8004b36:	6021      	strge	r1, [r4, #0]
 8004b38:	b90d      	cbnz	r5, 8004b3e <_printf_i+0x112>
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	d04b      	beq.n	8004bd6 <_printf_i+0x1aa>
 8004b3e:	4616      	mov	r6, r2
 8004b40:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b44:	fb03 5711 	mls	r7, r3, r1, r5
 8004b48:	5dc7      	ldrb	r7, [r0, r7]
 8004b4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b4e:	462f      	mov	r7, r5
 8004b50:	42bb      	cmp	r3, r7
 8004b52:	460d      	mov	r5, r1
 8004b54:	d9f4      	bls.n	8004b40 <_printf_i+0x114>
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d10b      	bne.n	8004b72 <_printf_i+0x146>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	07df      	lsls	r7, r3, #31
 8004b5e:	d508      	bpl.n	8004b72 <_printf_i+0x146>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	6861      	ldr	r1, [r4, #4]
 8004b64:	4299      	cmp	r1, r3
 8004b66:	bfde      	ittt	le
 8004b68:	2330      	movle	r3, #48	@ 0x30
 8004b6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b72:	1b92      	subs	r2, r2, r6
 8004b74:	6122      	str	r2, [r4, #16]
 8004b76:	464b      	mov	r3, r9
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	f8cd a000 	str.w	sl, [sp]
 8004b80:	aa03      	add	r2, sp, #12
 8004b82:	f7ff fee1 	bl	8004948 <_printf_common>
 8004b86:	3001      	adds	r0, #1
 8004b88:	d14a      	bne.n	8004c20 <_printf_i+0x1f4>
 8004b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8e:	b004      	add	sp, #16
 8004b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f043 0320 	orr.w	r3, r3, #32
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	2778      	movs	r7, #120	@ 0x78
 8004b9e:	4832      	ldr	r0, [pc, #200]	@ (8004c68 <_printf_i+0x23c>)
 8004ba0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	6831      	ldr	r1, [r6, #0]
 8004ba8:	061f      	lsls	r7, r3, #24
 8004baa:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bae:	d402      	bmi.n	8004bb6 <_printf_i+0x18a>
 8004bb0:	065f      	lsls	r7, r3, #25
 8004bb2:	bf48      	it	mi
 8004bb4:	b2ad      	uxthmi	r5, r5
 8004bb6:	6031      	str	r1, [r6, #0]
 8004bb8:	07d9      	lsls	r1, r3, #31
 8004bba:	bf44      	itt	mi
 8004bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004bc0:	6023      	strmi	r3, [r4, #0]
 8004bc2:	b11d      	cbz	r5, 8004bcc <_printf_i+0x1a0>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	e7ab      	b.n	8004b20 <_printf_i+0xf4>
 8004bc8:	4826      	ldr	r0, [pc, #152]	@ (8004c64 <_printf_i+0x238>)
 8004bca:	e7e9      	b.n	8004ba0 <_printf_i+0x174>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f023 0320 	bic.w	r3, r3, #32
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	e7f6      	b.n	8004bc4 <_printf_i+0x198>
 8004bd6:	4616      	mov	r6, r2
 8004bd8:	e7bd      	b.n	8004b56 <_printf_i+0x12a>
 8004bda:	6833      	ldr	r3, [r6, #0]
 8004bdc:	6825      	ldr	r5, [r4, #0]
 8004bde:	1d18      	adds	r0, r3, #4
 8004be0:	6961      	ldr	r1, [r4, #20]
 8004be2:	6030      	str	r0, [r6, #0]
 8004be4:	062e      	lsls	r6, r5, #24
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	d501      	bpl.n	8004bee <_printf_i+0x1c2>
 8004bea:	6019      	str	r1, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <_printf_i+0x1c8>
 8004bee:	0668      	lsls	r0, r5, #25
 8004bf0:	d5fb      	bpl.n	8004bea <_printf_i+0x1be>
 8004bf2:	8019      	strh	r1, [r3, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	6123      	str	r3, [r4, #16]
 8004bfa:	e7bc      	b.n	8004b76 <_printf_i+0x14a>
 8004bfc:	6833      	ldr	r3, [r6, #0]
 8004bfe:	2100      	movs	r1, #0
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	6032      	str	r2, [r6, #0]
 8004c04:	681e      	ldr	r6, [r3, #0]
 8004c06:	6862      	ldr	r2, [r4, #4]
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f000 f859 	bl	8004cc0 <memchr>
 8004c0e:	b108      	cbz	r0, 8004c14 <_printf_i+0x1e8>
 8004c10:	1b80      	subs	r0, r0, r6
 8004c12:	6060      	str	r0, [r4, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1e:	e7aa      	b.n	8004b76 <_printf_i+0x14a>
 8004c20:	4632      	mov	r2, r6
 8004c22:	4649      	mov	r1, r9
 8004c24:	4640      	mov	r0, r8
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	47d0      	blx	sl
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d0ad      	beq.n	8004b8a <_printf_i+0x15e>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	079b      	lsls	r3, r3, #30
 8004c32:	d413      	bmi.n	8004c5c <_printf_i+0x230>
 8004c34:	68e0      	ldr	r0, [r4, #12]
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	4298      	cmp	r0, r3
 8004c3a:	bfb8      	it	lt
 8004c3c:	4618      	movlt	r0, r3
 8004c3e:	e7a6      	b.n	8004b8e <_printf_i+0x162>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4632      	mov	r2, r6
 8004c44:	4649      	mov	r1, r9
 8004c46:	4640      	mov	r0, r8
 8004c48:	47d0      	blx	sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d09d      	beq.n	8004b8a <_printf_i+0x15e>
 8004c4e:	3501      	adds	r5, #1
 8004c50:	68e3      	ldr	r3, [r4, #12]
 8004c52:	9903      	ldr	r1, [sp, #12]
 8004c54:	1a5b      	subs	r3, r3, r1
 8004c56:	42ab      	cmp	r3, r5
 8004c58:	dcf2      	bgt.n	8004c40 <_printf_i+0x214>
 8004c5a:	e7eb      	b.n	8004c34 <_printf_i+0x208>
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	f104 0619 	add.w	r6, r4, #25
 8004c62:	e7f5      	b.n	8004c50 <_printf_i+0x224>
 8004c64:	08004eb3 	.word	0x08004eb3
 8004c68:	08004ec4 	.word	0x08004ec4

08004c6c <memmove>:
 8004c6c:	4288      	cmp	r0, r1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	eb01 0402 	add.w	r4, r1, r2
 8004c74:	d902      	bls.n	8004c7c <memmove+0x10>
 8004c76:	4284      	cmp	r4, r0
 8004c78:	4623      	mov	r3, r4
 8004c7a:	d807      	bhi.n	8004c8c <memmove+0x20>
 8004c7c:	1e43      	subs	r3, r0, #1
 8004c7e:	42a1      	cmp	r1, r4
 8004c80:	d008      	beq.n	8004c94 <memmove+0x28>
 8004c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8a:	e7f8      	b.n	8004c7e <memmove+0x12>
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4402      	add	r2, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	d100      	bne.n	8004c96 <memmove+0x2a>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9e:	e7f7      	b.n	8004c90 <memmove+0x24>

08004ca0 <_sbrk_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4d05      	ldr	r5, [pc, #20]	@ (8004cbc <_sbrk_r+0x1c>)
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fb feb8 	bl	8000a20 <_sbrk>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_sbrk_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_sbrk_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	200014b8 	.word	0x200014b8

08004cc0 <memchr>:
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	b510      	push	{r4, lr}
 8004cc4:	b2c9      	uxtb	r1, r1
 8004cc6:	4402      	add	r2, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	d101      	bne.n	8004cd2 <memchr+0x12>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e003      	b.n	8004cda <memchr+0x1a>
 8004cd2:	7804      	ldrb	r4, [r0, #0]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	428c      	cmp	r4, r1
 8004cd8:	d1f6      	bne.n	8004cc8 <memchr+0x8>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_realloc_r>:
 8004cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	b921      	cbnz	r1, 8004cf2 <_realloc_r+0x16>
 8004ce8:	4611      	mov	r1, r2
 8004cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	f7ff bc47 	b.w	8004580 <_malloc_r>
 8004cf2:	b92a      	cbnz	r2, 8004d00 <_realloc_r+0x24>
 8004cf4:	f7ff fbda 	bl	80044ac <_free_r>
 8004cf8:	2400      	movs	r4, #0
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d00:	f000 f81a 	bl	8004d38 <_malloc_usable_size_r>
 8004d04:	4285      	cmp	r5, r0
 8004d06:	4606      	mov	r6, r0
 8004d08:	d802      	bhi.n	8004d10 <_realloc_r+0x34>
 8004d0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d0e:	d8f4      	bhi.n	8004cfa <_realloc_r+0x1e>
 8004d10:	4629      	mov	r1, r5
 8004d12:	4640      	mov	r0, r8
 8004d14:	f7ff fc34 	bl	8004580 <_malloc_r>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0ec      	beq.n	8004cf8 <_realloc_r+0x1c>
 8004d1e:	42b5      	cmp	r5, r6
 8004d20:	462a      	mov	r2, r5
 8004d22:	4621      	mov	r1, r4
 8004d24:	bf28      	it	cs
 8004d26:	4632      	movcs	r2, r6
 8004d28:	f7ff fbb2 	bl	8004490 <memcpy>
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7ff fbbc 	bl	80044ac <_free_r>
 8004d34:	463c      	mov	r4, r7
 8004d36:	e7e0      	b.n	8004cfa <_realloc_r+0x1e>

08004d38 <_malloc_usable_size_r>:
 8004d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3c:	1f18      	subs	r0, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfbc      	itt	lt
 8004d42:	580b      	ldrlt	r3, [r1, r0]
 8004d44:	18c0      	addlt	r0, r0, r3
 8004d46:	4770      	bx	lr

08004d48 <_init>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	bf00      	nop
 8004d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4e:	bc08      	pop	{r3}
 8004d50:	469e      	mov	lr, r3
 8004d52:	4770      	bx	lr

08004d54 <_fini>:
 8004d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d56:	bf00      	nop
 8004d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5a:	bc08      	pop	{r3}
 8004d5c:	469e      	mov	lr, r3
 8004d5e:	4770      	bx	lr
